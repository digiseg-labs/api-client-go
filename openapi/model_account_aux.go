/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountAux type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountAux{}

// AccountAux struct for AccountAux
type AccountAux struct {
	// ID of the user who is the ultimate owner of the account. Deprecated in favor of the `owner` role of the user's account membership.
	// Deprecated
	OwnerId *string `json:"owner_id,omitempty"`
	// The email address to send billing information to. Requires `owner` role to change.
	BillingEmail *string `json:"billing_email,omitempty"`
	BillingAddress *PostalAddress `json:"billing_address,omitempty"`
	// A list of Tax IDs used by the account, for billing purposes.
	BillingTaxIds []TaxId `json:"billing_tax_ids,omitempty"`
	BillingCurrency *SubscriptionPriceCurrency `json:"billing_currency,omitempty"`
	// An optional official name to use for billing purposes. Requires `owner` role to change.
	BillingName *string `json:"billing_name,omitempty"`
	StripeCustomerId *string `json:"stripe_customer_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountAux AccountAux

// NewAccountAux instantiates a new AccountAux object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountAux() *AccountAux {
	this := AccountAux{}
	var billingCurrency SubscriptionPriceCurrency = SUBSCRIPTIONPRICECURRENCY_EUR
	this.BillingCurrency = &billingCurrency
	return &this
}

// NewAccountAuxWithDefaults instantiates a new AccountAux object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountAuxWithDefaults() *AccountAux {
	this := AccountAux{}
	var billingCurrency SubscriptionPriceCurrency = SUBSCRIPTIONPRICECURRENCY_EUR
	this.BillingCurrency = &billingCurrency
	return &this
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise.
// Deprecated
func (o *AccountAux) GetOwnerId() string {
	if o == nil || IsNil(o.OwnerId) {
		var ret string
		return ret
	}
	return *o.OwnerId
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AccountAux) GetOwnerIdOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerId) {
		return nil, false
	}
	return o.OwnerId, true
}

// HasOwnerId returns a boolean if a field has been set.
func (o *AccountAux) HasOwnerId() bool {
	if o != nil && !IsNil(o.OwnerId) {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given string and assigns it to the OwnerId field.
// Deprecated
func (o *AccountAux) SetOwnerId(v string) {
	o.OwnerId = &v
}

// GetBillingEmail returns the BillingEmail field value if set, zero value otherwise.
func (o *AccountAux) GetBillingEmail() string {
	if o == nil || IsNil(o.BillingEmail) {
		var ret string
		return ret
	}
	return *o.BillingEmail
}

// GetBillingEmailOk returns a tuple with the BillingEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAux) GetBillingEmailOk() (*string, bool) {
	if o == nil || IsNil(o.BillingEmail) {
		return nil, false
	}
	return o.BillingEmail, true
}

// HasBillingEmail returns a boolean if a field has been set.
func (o *AccountAux) HasBillingEmail() bool {
	if o != nil && !IsNil(o.BillingEmail) {
		return true
	}

	return false
}

// SetBillingEmail gets a reference to the given string and assigns it to the BillingEmail field.
func (o *AccountAux) SetBillingEmail(v string) {
	o.BillingEmail = &v
}

// GetBillingAddress returns the BillingAddress field value if set, zero value otherwise.
func (o *AccountAux) GetBillingAddress() PostalAddress {
	if o == nil || IsNil(o.BillingAddress) {
		var ret PostalAddress
		return ret
	}
	return *o.BillingAddress
}

// GetBillingAddressOk returns a tuple with the BillingAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAux) GetBillingAddressOk() (*PostalAddress, bool) {
	if o == nil || IsNil(o.BillingAddress) {
		return nil, false
	}
	return o.BillingAddress, true
}

// HasBillingAddress returns a boolean if a field has been set.
func (o *AccountAux) HasBillingAddress() bool {
	if o != nil && !IsNil(o.BillingAddress) {
		return true
	}

	return false
}

// SetBillingAddress gets a reference to the given PostalAddress and assigns it to the BillingAddress field.
func (o *AccountAux) SetBillingAddress(v PostalAddress) {
	o.BillingAddress = &v
}

// GetBillingTaxIds returns the BillingTaxIds field value if set, zero value otherwise.
func (o *AccountAux) GetBillingTaxIds() []TaxId {
	if o == nil || IsNil(o.BillingTaxIds) {
		var ret []TaxId
		return ret
	}
	return o.BillingTaxIds
}

// GetBillingTaxIdsOk returns a tuple with the BillingTaxIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAux) GetBillingTaxIdsOk() ([]TaxId, bool) {
	if o == nil || IsNil(o.BillingTaxIds) {
		return nil, false
	}
	return o.BillingTaxIds, true
}

// HasBillingTaxIds returns a boolean if a field has been set.
func (o *AccountAux) HasBillingTaxIds() bool {
	if o != nil && !IsNil(o.BillingTaxIds) {
		return true
	}

	return false
}

// SetBillingTaxIds gets a reference to the given []TaxId and assigns it to the BillingTaxIds field.
func (o *AccountAux) SetBillingTaxIds(v []TaxId) {
	o.BillingTaxIds = v
}

// GetBillingCurrency returns the BillingCurrency field value if set, zero value otherwise.
func (o *AccountAux) GetBillingCurrency() SubscriptionPriceCurrency {
	if o == nil || IsNil(o.BillingCurrency) {
		var ret SubscriptionPriceCurrency
		return ret
	}
	return *o.BillingCurrency
}

// GetBillingCurrencyOk returns a tuple with the BillingCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAux) GetBillingCurrencyOk() (*SubscriptionPriceCurrency, bool) {
	if o == nil || IsNil(o.BillingCurrency) {
		return nil, false
	}
	return o.BillingCurrency, true
}

// HasBillingCurrency returns a boolean if a field has been set.
func (o *AccountAux) HasBillingCurrency() bool {
	if o != nil && !IsNil(o.BillingCurrency) {
		return true
	}

	return false
}

// SetBillingCurrency gets a reference to the given SubscriptionPriceCurrency and assigns it to the BillingCurrency field.
func (o *AccountAux) SetBillingCurrency(v SubscriptionPriceCurrency) {
	o.BillingCurrency = &v
}

// GetBillingName returns the BillingName field value if set, zero value otherwise.
func (o *AccountAux) GetBillingName() string {
	if o == nil || IsNil(o.BillingName) {
		var ret string
		return ret
	}
	return *o.BillingName
}

// GetBillingNameOk returns a tuple with the BillingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAux) GetBillingNameOk() (*string, bool) {
	if o == nil || IsNil(o.BillingName) {
		return nil, false
	}
	return o.BillingName, true
}

// HasBillingName returns a boolean if a field has been set.
func (o *AccountAux) HasBillingName() bool {
	if o != nil && !IsNil(o.BillingName) {
		return true
	}

	return false
}

// SetBillingName gets a reference to the given string and assigns it to the BillingName field.
func (o *AccountAux) SetBillingName(v string) {
	o.BillingName = &v
}

// GetStripeCustomerId returns the StripeCustomerId field value if set, zero value otherwise.
func (o *AccountAux) GetStripeCustomerId() string {
	if o == nil || IsNil(o.StripeCustomerId) {
		var ret string
		return ret
	}
	return *o.StripeCustomerId
}

// GetStripeCustomerIdOk returns a tuple with the StripeCustomerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountAux) GetStripeCustomerIdOk() (*string, bool) {
	if o == nil || IsNil(o.StripeCustomerId) {
		return nil, false
	}
	return o.StripeCustomerId, true
}

// HasStripeCustomerId returns a boolean if a field has been set.
func (o *AccountAux) HasStripeCustomerId() bool {
	if o != nil && !IsNil(o.StripeCustomerId) {
		return true
	}

	return false
}

// SetStripeCustomerId gets a reference to the given string and assigns it to the StripeCustomerId field.
func (o *AccountAux) SetStripeCustomerId(v string) {
	o.StripeCustomerId = &v
}

func (o AccountAux) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountAux) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OwnerId) {
		toSerialize["owner_id"] = o.OwnerId
	}
	if !IsNil(o.BillingEmail) {
		toSerialize["billing_email"] = o.BillingEmail
	}
	if !IsNil(o.BillingAddress) {
		toSerialize["billing_address"] = o.BillingAddress
	}
	if !IsNil(o.BillingTaxIds) {
		toSerialize["billing_tax_ids"] = o.BillingTaxIds
	}
	if !IsNil(o.BillingCurrency) {
		toSerialize["billing_currency"] = o.BillingCurrency
	}
	if !IsNil(o.BillingName) {
		toSerialize["billing_name"] = o.BillingName
	}
	if !IsNil(o.StripeCustomerId) {
		toSerialize["stripe_customer_id"] = o.StripeCustomerId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountAux) UnmarshalJSON(data []byte) (err error) {
	varAccountAux := _AccountAux{}

	err = json.Unmarshal(data, &varAccountAux)

	if err != nil {
		return err
	}

	*o = AccountAux(varAccountAux)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "owner_id")
		delete(additionalProperties, "billing_email")
		delete(additionalProperties, "billing_address")
		delete(additionalProperties, "billing_tax_ids")
		delete(additionalProperties, "billing_currency")
		delete(additionalProperties, "billing_name")
		delete(additionalProperties, "stripe_customer_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountAux struct {
	value *AccountAux
	isSet bool
}

func (v NullableAccountAux) Get() *AccountAux {
	return v.value
}

func (v *NullableAccountAux) Set(val *AccountAux) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountAux) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountAux) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountAux(val *AccountAux) *NullableAccountAux {
	return &NullableAccountAux{value: val, isSet: true}
}

func (v NullableAccountAux) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountAux) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


