/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AccountItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountItem{}

// AccountItem struct for AccountItem
type AccountItem struct {
	// Unique ID for the object
	Id *string `json:"id,omitempty"`
	// Human readable name of the account
	Name *string `json:"name,omitempty"`
	// The URL to the logo of the account
	LogoUrl *string `json:"logo_url,omitempty"`
	// URL of the account's primary website
	WebsiteUrl *string `json:"website_url,omitempty"`
	// Country code of the account. Requires `owner` role to change.
	BillingCountry *string `json:"billing_country,omitempty"`
	// The type of company that the account represents. Note that for forward-compatibility the data type here is simply a string. The values, if present, will however typically originate from the `CompanyType` enum. 
	CompanyType *string `json:"company_type,omitempty"`
	CompanySize *CompanySize `json:"company_size,omitempty"`
	// Determines whether the account has clients that they work for, or if their activities are for themselves.
	HasClients *bool `json:"has_clients,omitempty"`
	// A short human-readable name to identify the account. Must be lower-case and between 4 and 16 characters.
	// Deprecated
	Slug *string `json:"slug,omitempty" validate:"regexp=^[a-z]{4,16}$"`
	FeatureSet *PlanFeatureSet `json:"feature_set,omitempty"`
	Subscriptions []AccountSubscriptionItem `json:"subscriptions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountItem AccountItem

// NewAccountItem instantiates a new AccountItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountItem() *AccountItem {
	this := AccountItem{}
	return &this
}

// NewAccountItemWithDefaults instantiates a new AccountItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountItemWithDefaults() *AccountItem {
	this := AccountItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccountItem) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountItem) SetName(v string) {
	o.Name = &v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *AccountItem) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *AccountItem) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *AccountItem) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetWebsiteUrl returns the WebsiteUrl field value if set, zero value otherwise.
func (o *AccountItem) GetWebsiteUrl() string {
	if o == nil || IsNil(o.WebsiteUrl) {
		var ret string
		return ret
	}
	return *o.WebsiteUrl
}

// GetWebsiteUrlOk returns a tuple with the WebsiteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetWebsiteUrlOk() (*string, bool) {
	if o == nil || IsNil(o.WebsiteUrl) {
		return nil, false
	}
	return o.WebsiteUrl, true
}

// HasWebsiteUrl returns a boolean if a field has been set.
func (o *AccountItem) HasWebsiteUrl() bool {
	if o != nil && !IsNil(o.WebsiteUrl) {
		return true
	}

	return false
}

// SetWebsiteUrl gets a reference to the given string and assigns it to the WebsiteUrl field.
func (o *AccountItem) SetWebsiteUrl(v string) {
	o.WebsiteUrl = &v
}

// GetBillingCountry returns the BillingCountry field value if set, zero value otherwise.
func (o *AccountItem) GetBillingCountry() string {
	if o == nil || IsNil(o.BillingCountry) {
		var ret string
		return ret
	}
	return *o.BillingCountry
}

// GetBillingCountryOk returns a tuple with the BillingCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetBillingCountryOk() (*string, bool) {
	if o == nil || IsNil(o.BillingCountry) {
		return nil, false
	}
	return o.BillingCountry, true
}

// HasBillingCountry returns a boolean if a field has been set.
func (o *AccountItem) HasBillingCountry() bool {
	if o != nil && !IsNil(o.BillingCountry) {
		return true
	}

	return false
}

// SetBillingCountry gets a reference to the given string and assigns it to the BillingCountry field.
func (o *AccountItem) SetBillingCountry(v string) {
	o.BillingCountry = &v
}

// GetCompanyType returns the CompanyType field value if set, zero value otherwise.
func (o *AccountItem) GetCompanyType() string {
	if o == nil || IsNil(o.CompanyType) {
		var ret string
		return ret
	}
	return *o.CompanyType
}

// GetCompanyTypeOk returns a tuple with the CompanyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetCompanyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyType) {
		return nil, false
	}
	return o.CompanyType, true
}

// HasCompanyType returns a boolean if a field has been set.
func (o *AccountItem) HasCompanyType() bool {
	if o != nil && !IsNil(o.CompanyType) {
		return true
	}

	return false
}

// SetCompanyType gets a reference to the given string and assigns it to the CompanyType field.
func (o *AccountItem) SetCompanyType(v string) {
	o.CompanyType = &v
}

// GetCompanySize returns the CompanySize field value if set, zero value otherwise.
func (o *AccountItem) GetCompanySize() CompanySize {
	if o == nil || IsNil(o.CompanySize) {
		var ret CompanySize
		return ret
	}
	return *o.CompanySize
}

// GetCompanySizeOk returns a tuple with the CompanySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetCompanySizeOk() (*CompanySize, bool) {
	if o == nil || IsNil(o.CompanySize) {
		return nil, false
	}
	return o.CompanySize, true
}

// HasCompanySize returns a boolean if a field has been set.
func (o *AccountItem) HasCompanySize() bool {
	if o != nil && !IsNil(o.CompanySize) {
		return true
	}

	return false
}

// SetCompanySize gets a reference to the given CompanySize and assigns it to the CompanySize field.
func (o *AccountItem) SetCompanySize(v CompanySize) {
	o.CompanySize = &v
}

// GetHasClients returns the HasClients field value if set, zero value otherwise.
func (o *AccountItem) GetHasClients() bool {
	if o == nil || IsNil(o.HasClients) {
		var ret bool
		return ret
	}
	return *o.HasClients
}

// GetHasClientsOk returns a tuple with the HasClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetHasClientsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasClients) {
		return nil, false
	}
	return o.HasClients, true
}

// HasHasClients returns a boolean if a field has been set.
func (o *AccountItem) HasHasClients() bool {
	if o != nil && !IsNil(o.HasClients) {
		return true
	}

	return false
}

// SetHasClients gets a reference to the given bool and assigns it to the HasClients field.
func (o *AccountItem) SetHasClients(v bool) {
	o.HasClients = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
// Deprecated
func (o *AccountItem) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AccountItem) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *AccountItem) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
// Deprecated
func (o *AccountItem) SetSlug(v string) {
	o.Slug = &v
}

// GetFeatureSet returns the FeatureSet field value if set, zero value otherwise.
func (o *AccountItem) GetFeatureSet() PlanFeatureSet {
	if o == nil || IsNil(o.FeatureSet) {
		var ret PlanFeatureSet
		return ret
	}
	return *o.FeatureSet
}

// GetFeatureSetOk returns a tuple with the FeatureSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetFeatureSetOk() (*PlanFeatureSet, bool) {
	if o == nil || IsNil(o.FeatureSet) {
		return nil, false
	}
	return o.FeatureSet, true
}

// HasFeatureSet returns a boolean if a field has been set.
func (o *AccountItem) HasFeatureSet() bool {
	if o != nil && !IsNil(o.FeatureSet) {
		return true
	}

	return false
}

// SetFeatureSet gets a reference to the given PlanFeatureSet and assigns it to the FeatureSet field.
func (o *AccountItem) SetFeatureSet(v PlanFeatureSet) {
	o.FeatureSet = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *AccountItem) GetSubscriptions() []AccountSubscriptionItem {
	if o == nil || IsNil(o.Subscriptions) {
		var ret []AccountSubscriptionItem
		return ret
	}
	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountItem) GetSubscriptionsOk() ([]AccountSubscriptionItem, bool) {
	if o == nil || IsNil(o.Subscriptions) {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *AccountItem) HasSubscriptions() bool {
	if o != nil && !IsNil(o.Subscriptions) {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given []AccountSubscriptionItem and assigns it to the Subscriptions field.
func (o *AccountItem) SetSubscriptions(v []AccountSubscriptionItem) {
	o.Subscriptions = v
}

func (o AccountItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logo_url"] = o.LogoUrl
	}
	if !IsNil(o.WebsiteUrl) {
		toSerialize["website_url"] = o.WebsiteUrl
	}
	if !IsNil(o.BillingCountry) {
		toSerialize["billing_country"] = o.BillingCountry
	}
	if !IsNil(o.CompanyType) {
		toSerialize["company_type"] = o.CompanyType
	}
	if !IsNil(o.CompanySize) {
		toSerialize["company_size"] = o.CompanySize
	}
	if !IsNil(o.HasClients) {
		toSerialize["has_clients"] = o.HasClients
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.FeatureSet) {
		toSerialize["feature_set"] = o.FeatureSet
	}
	if !IsNil(o.Subscriptions) {
		toSerialize["subscriptions"] = o.Subscriptions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountItem) UnmarshalJSON(data []byte) (err error) {
	varAccountItem := _AccountItem{}

	err = json.Unmarshal(data, &varAccountItem)

	if err != nil {
		return err
	}

	*o = AccountItem(varAccountItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "logo_url")
		delete(additionalProperties, "website_url")
		delete(additionalProperties, "billing_country")
		delete(additionalProperties, "company_type")
		delete(additionalProperties, "company_size")
		delete(additionalProperties, "has_clients")
		delete(additionalProperties, "slug")
		delete(additionalProperties, "feature_set")
		delete(additionalProperties, "subscriptions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountItem struct {
	value *AccountItem
	isSet bool
}

func (v NullableAccountItem) Get() *AccountItem {
	return v.value
}

func (v *NullableAccountItem) Set(val *AccountItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountItem(val *AccountItem) *NullableAccountItem {
	return &NullableAccountItem{value: val, isSet: true}
}

func (v NullableAccountItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


