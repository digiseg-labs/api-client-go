/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the AccountSubscriptionBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSubscriptionBase{}

// AccountSubscriptionBase struct for AccountSubscriptionBase
type AccountSubscriptionBase struct {
	// The ID of the subscription
	Id string `json:"id"`
	// Start date (inclusive) of the subscription
	StartDate string `json:"start_date"`
	// End date (inclusive) of the subscription
	EndDate *string `json:"end_date,omitempty"`
	// Is the subscription currently active or not?
	IsActive bool `json:"is_active"`
	// Time of cancelling the subscription, if it has been cancelled. Note that a cancelled subscription may still be active, if it has been prepaid for the current period. 
	CancelledAt *time.Time `json:"cancelled_at,omitempty"`
	ActualPrice *SubscriptionPrice `json:"actual_price,omitempty"`
	PaymentConfiguration *AccountSubscriptionPaymentConfiguration `json:"payment_configuration,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountSubscriptionBase AccountSubscriptionBase

// NewAccountSubscriptionBase instantiates a new AccountSubscriptionBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSubscriptionBase(id string, startDate string, isActive bool) *AccountSubscriptionBase {
	this := AccountSubscriptionBase{}
	this.Id = id
	this.StartDate = startDate
	this.IsActive = isActive
	return &this
}

// NewAccountSubscriptionBaseWithDefaults instantiates a new AccountSubscriptionBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSubscriptionBaseWithDefaults() *AccountSubscriptionBase {
	this := AccountSubscriptionBase{}
	return &this
}

// GetId returns the Id field value
func (o *AccountSubscriptionBase) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountSubscriptionBase) SetId(v string) {
	o.Id = v
}

// GetStartDate returns the StartDate field value
func (o *AccountSubscriptionBase) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *AccountSubscriptionBase) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AccountSubscriptionBase) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AccountSubscriptionBase) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *AccountSubscriptionBase) SetEndDate(v string) {
	o.EndDate = &v
}

// GetIsActive returns the IsActive field value
func (o *AccountSubscriptionBase) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *AccountSubscriptionBase) SetIsActive(v bool) {
	o.IsActive = v
}

// GetCancelledAt returns the CancelledAt field value if set, zero value otherwise.
func (o *AccountSubscriptionBase) GetCancelledAt() time.Time {
	if o == nil || IsNil(o.CancelledAt) {
		var ret time.Time
		return ret
	}
	return *o.CancelledAt
}

// GetCancelledAtOk returns a tuple with the CancelledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetCancelledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CancelledAt) {
		return nil, false
	}
	return o.CancelledAt, true
}

// HasCancelledAt returns a boolean if a field has been set.
func (o *AccountSubscriptionBase) HasCancelledAt() bool {
	if o != nil && !IsNil(o.CancelledAt) {
		return true
	}

	return false
}

// SetCancelledAt gets a reference to the given time.Time and assigns it to the CancelledAt field.
func (o *AccountSubscriptionBase) SetCancelledAt(v time.Time) {
	o.CancelledAt = &v
}

// GetActualPrice returns the ActualPrice field value if set, zero value otherwise.
func (o *AccountSubscriptionBase) GetActualPrice() SubscriptionPrice {
	if o == nil || IsNil(o.ActualPrice) {
		var ret SubscriptionPrice
		return ret
	}
	return *o.ActualPrice
}

// GetActualPriceOk returns a tuple with the ActualPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetActualPriceOk() (*SubscriptionPrice, bool) {
	if o == nil || IsNil(o.ActualPrice) {
		return nil, false
	}
	return o.ActualPrice, true
}

// HasActualPrice returns a boolean if a field has been set.
func (o *AccountSubscriptionBase) HasActualPrice() bool {
	if o != nil && !IsNil(o.ActualPrice) {
		return true
	}

	return false
}

// SetActualPrice gets a reference to the given SubscriptionPrice and assigns it to the ActualPrice field.
func (o *AccountSubscriptionBase) SetActualPrice(v SubscriptionPrice) {
	o.ActualPrice = &v
}

// GetPaymentConfiguration returns the PaymentConfiguration field value if set, zero value otherwise.
func (o *AccountSubscriptionBase) GetPaymentConfiguration() AccountSubscriptionPaymentConfiguration {
	if o == nil || IsNil(o.PaymentConfiguration) {
		var ret AccountSubscriptionPaymentConfiguration
		return ret
	}
	return *o.PaymentConfiguration
}

// GetPaymentConfigurationOk returns a tuple with the PaymentConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionBase) GetPaymentConfigurationOk() (*AccountSubscriptionPaymentConfiguration, bool) {
	if o == nil || IsNil(o.PaymentConfiguration) {
		return nil, false
	}
	return o.PaymentConfiguration, true
}

// HasPaymentConfiguration returns a boolean if a field has been set.
func (o *AccountSubscriptionBase) HasPaymentConfiguration() bool {
	if o != nil && !IsNil(o.PaymentConfiguration) {
		return true
	}

	return false
}

// SetPaymentConfiguration gets a reference to the given AccountSubscriptionPaymentConfiguration and assigns it to the PaymentConfiguration field.
func (o *AccountSubscriptionBase) SetPaymentConfiguration(v AccountSubscriptionPaymentConfiguration) {
	o.PaymentConfiguration = &v
}

func (o AccountSubscriptionBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSubscriptionBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["start_date"] = o.StartDate
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	toSerialize["is_active"] = o.IsActive
	if !IsNil(o.CancelledAt) {
		toSerialize["cancelled_at"] = o.CancelledAt
	}
	if !IsNil(o.ActualPrice) {
		toSerialize["actual_price"] = o.ActualPrice
	}
	if !IsNil(o.PaymentConfiguration) {
		toSerialize["payment_configuration"] = o.PaymentConfiguration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountSubscriptionBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"start_date",
		"is_active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountSubscriptionBase := _AccountSubscriptionBase{}

	err = json.Unmarshal(data, &varAccountSubscriptionBase)

	if err != nil {
		return err
	}

	*o = AccountSubscriptionBase(varAccountSubscriptionBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "cancelled_at")
		delete(additionalProperties, "actual_price")
		delete(additionalProperties, "payment_configuration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountSubscriptionBase struct {
	value *AccountSubscriptionBase
	isSet bool
}

func (v NullableAccountSubscriptionBase) Get() *AccountSubscriptionBase {
	return v.value
}

func (v *NullableAccountSubscriptionBase) Set(val *AccountSubscriptionBase) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSubscriptionBase) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSubscriptionBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSubscriptionBase(val *AccountSubscriptionBase) *NullableAccountSubscriptionBase {
	return &NullableAccountSubscriptionBase{value: val, isSet: true}
}

func (v NullableAccountSubscriptionBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSubscriptionBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


