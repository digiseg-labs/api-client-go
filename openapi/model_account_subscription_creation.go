/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young couples and singles | |  |  | c2 | Early family life | |  |  | c3 | Middle-aged families | |  |  | c4 | Mature families | |  |  | c5 | Pensioners / Retirees | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Small | |  |  | l2 | Medium | |  |  | l3 | Large | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AccountSubscriptionCreation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountSubscriptionCreation{}

// AccountSubscriptionCreation struct for AccountSubscriptionCreation
type AccountSubscriptionCreation struct {
	// The ID of the subscription
	Id string `json:"id"`
	StartDate string `json:"start_date"`
	EndDate *string `json:"end_date,omitempty"`
	// Is the subscription currently active or not?
	IsActive bool `json:"is_active"`
	ActualPrice *SubscriptionPrice `json:"actual_price,omitempty"`
	PaymentConfiguration *AccountSubscriptionPaymentConfiguration `json:"payment_configuration,omitempty"`
	// The ID of the plan to subscribe to
	PlanId *string `json:"plan_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountSubscriptionCreation AccountSubscriptionCreation

// NewAccountSubscriptionCreation instantiates a new AccountSubscriptionCreation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountSubscriptionCreation(id string, startDate string, isActive bool) *AccountSubscriptionCreation {
	this := AccountSubscriptionCreation{}
	this.Id = id
	this.StartDate = startDate
	this.IsActive = isActive
	return &this
}

// NewAccountSubscriptionCreationWithDefaults instantiates a new AccountSubscriptionCreation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountSubscriptionCreationWithDefaults() *AccountSubscriptionCreation {
	this := AccountSubscriptionCreation{}
	return &this
}

// GetId returns the Id field value
func (o *AccountSubscriptionCreation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountSubscriptionCreation) SetId(v string) {
	o.Id = v
}

// GetStartDate returns the StartDate field value
func (o *AccountSubscriptionCreation) GetStartDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartDate, true
}

// SetStartDate sets field value
func (o *AccountSubscriptionCreation) SetStartDate(v string) {
	o.StartDate = v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *AccountSubscriptionCreation) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *AccountSubscriptionCreation) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *AccountSubscriptionCreation) SetEndDate(v string) {
	o.EndDate = &v
}

// GetIsActive returns the IsActive field value
func (o *AccountSubscriptionCreation) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *AccountSubscriptionCreation) SetIsActive(v bool) {
	o.IsActive = v
}

// GetActualPrice returns the ActualPrice field value if set, zero value otherwise.
func (o *AccountSubscriptionCreation) GetActualPrice() SubscriptionPrice {
	if o == nil || IsNil(o.ActualPrice) {
		var ret SubscriptionPrice
		return ret
	}
	return *o.ActualPrice
}

// GetActualPriceOk returns a tuple with the ActualPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetActualPriceOk() (*SubscriptionPrice, bool) {
	if o == nil || IsNil(o.ActualPrice) {
		return nil, false
	}
	return o.ActualPrice, true
}

// HasActualPrice returns a boolean if a field has been set.
func (o *AccountSubscriptionCreation) HasActualPrice() bool {
	if o != nil && !IsNil(o.ActualPrice) {
		return true
	}

	return false
}

// SetActualPrice gets a reference to the given SubscriptionPrice and assigns it to the ActualPrice field.
func (o *AccountSubscriptionCreation) SetActualPrice(v SubscriptionPrice) {
	o.ActualPrice = &v
}

// GetPaymentConfiguration returns the PaymentConfiguration field value if set, zero value otherwise.
func (o *AccountSubscriptionCreation) GetPaymentConfiguration() AccountSubscriptionPaymentConfiguration {
	if o == nil || IsNil(o.PaymentConfiguration) {
		var ret AccountSubscriptionPaymentConfiguration
		return ret
	}
	return *o.PaymentConfiguration
}

// GetPaymentConfigurationOk returns a tuple with the PaymentConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetPaymentConfigurationOk() (*AccountSubscriptionPaymentConfiguration, bool) {
	if o == nil || IsNil(o.PaymentConfiguration) {
		return nil, false
	}
	return o.PaymentConfiguration, true
}

// HasPaymentConfiguration returns a boolean if a field has been set.
func (o *AccountSubscriptionCreation) HasPaymentConfiguration() bool {
	if o != nil && !IsNil(o.PaymentConfiguration) {
		return true
	}

	return false
}

// SetPaymentConfiguration gets a reference to the given AccountSubscriptionPaymentConfiguration and assigns it to the PaymentConfiguration field.
func (o *AccountSubscriptionCreation) SetPaymentConfiguration(v AccountSubscriptionPaymentConfiguration) {
	o.PaymentConfiguration = &v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *AccountSubscriptionCreation) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountSubscriptionCreation) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *AccountSubscriptionCreation) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *AccountSubscriptionCreation) SetPlanId(v string) {
	o.PlanId = &v
}

func (o AccountSubscriptionCreation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountSubscriptionCreation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["start_date"] = o.StartDate
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	toSerialize["is_active"] = o.IsActive
	if !IsNil(o.ActualPrice) {
		toSerialize["actual_price"] = o.ActualPrice
	}
	if !IsNil(o.PaymentConfiguration) {
		toSerialize["payment_configuration"] = o.PaymentConfiguration
	}
	if !IsNil(o.PlanId) {
		toSerialize["plan_id"] = o.PlanId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccountSubscriptionCreation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"start_date",
		"is_active",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountSubscriptionCreation := _AccountSubscriptionCreation{}

	err = json.Unmarshal(data, &varAccountSubscriptionCreation)

	if err != nil {
		return err
	}

	*o = AccountSubscriptionCreation(varAccountSubscriptionCreation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "start_date")
		delete(additionalProperties, "end_date")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "actual_price")
		delete(additionalProperties, "payment_configuration")
		delete(additionalProperties, "plan_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountSubscriptionCreation struct {
	value *AccountSubscriptionCreation
	isSet bool
}

func (v NullableAccountSubscriptionCreation) Get() *AccountSubscriptionCreation {
	return v.value
}

func (v *NullableAccountSubscriptionCreation) Set(val *AccountSubscriptionCreation) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountSubscriptionCreation) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountSubscriptionCreation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountSubscriptionCreation(val *AccountSubscriptionCreation) *NullableAccountSubscriptionCreation {
	return &NullableAccountSubscriptionCreation{value: val, isSet: true}
}

func (v NullableAccountSubscriptionCreation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountSubscriptionCreation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


