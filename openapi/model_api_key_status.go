/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ApiKeyStatus Describes the status of the API key. The status can be set to active or disabled manually. It will become expired automatically, if the expiry date has been surpassed. 
type ApiKeyStatus string

// List of ApiKeyStatus
const (
	APIKEYSTATUS_ENABLED ApiKeyStatus = "enabled"
	APIKEYSTATUS_DISABLED ApiKeyStatus = "disabled"
	APIKEYSTATUS_EXPIRED ApiKeyStatus = "expired"
)

// All allowed values of ApiKeyStatus enum
var AllowedApiKeyStatusEnumValues = []ApiKeyStatus{
	"enabled",
	"disabled",
	"expired",
}

func (v *ApiKeyStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ApiKeyStatus(value)
	for _, existing := range AllowedApiKeyStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ApiKeyStatus", value)
}

// NewApiKeyStatusFromValue returns a pointer to a valid ApiKeyStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewApiKeyStatusFromValue(v string) (*ApiKeyStatus, error) {
	ev := ApiKeyStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ApiKeyStatus: valid values are %v", v, AllowedApiKeyStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ApiKeyStatus) IsValid() bool {
	for _, existing := range AllowedApiKeyStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ApiKeyStatus value
func (v ApiKeyStatus) Ptr() *ApiKeyStatus {
	return &v
}

type NullableApiKeyStatus struct {
	value *ApiKeyStatus
	isSet bool
}

func (v NullableApiKeyStatus) Get() *ApiKeyStatus {
	return v.value
}

func (v *NullableApiKeyStatus) Set(val *ApiKeyStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableApiKeyStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableApiKeyStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiKeyStatus(val *ApiKeyStatus) *NullableApiKeyStatus {
	return &NullableApiKeyStatus{value: val, isSet: true}
}

func (v NullableApiKeyStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiKeyStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

