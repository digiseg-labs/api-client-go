/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AudienceItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceItem{}

// AudienceItem struct for AudienceItem
type AudienceItem struct {
	// A code used to represent the audience
	Code string `json:"code"`
	DisplayName string `json:"display_name"`
	// A textual description of the audience
	Description *string `json:"description,omitempty"`
	// A list of audience codes that this audience is composed from
	Composition []string `json:"composition,omitempty"`
	// Platform-specific code, provided when `platform` (and `country` if needed for the platform) is provided
	PlatformCode *string `json:"platform_code,omitempty"`
	ReachStats *AudienceReachStats `json:"reach_stats,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AudienceItem AudienceItem

// NewAudienceItem instantiates a new AudienceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceItem(code string, displayName string) *AudienceItem {
	this := AudienceItem{}
	this.Code = code
	this.DisplayName = displayName
	return &this
}

// NewAudienceItemWithDefaults instantiates a new AudienceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceItemWithDefaults() *AudienceItem {
	this := AudienceItem{}
	return &this
}

// GetCode returns the Code field value
func (o *AudienceItem) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AudienceItem) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AudienceItem) SetCode(v string) {
	o.Code = v
}

// GetDisplayName returns the DisplayName field value
func (o *AudienceItem) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *AudienceItem) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *AudienceItem) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AudienceItem) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceItem) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AudienceItem) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AudienceItem) SetDescription(v string) {
	o.Description = &v
}

// GetComposition returns the Composition field value if set, zero value otherwise.
func (o *AudienceItem) GetComposition() []string {
	if o == nil || IsNil(o.Composition) {
		var ret []string
		return ret
	}
	return o.Composition
}

// GetCompositionOk returns a tuple with the Composition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceItem) GetCompositionOk() ([]string, bool) {
	if o == nil || IsNil(o.Composition) {
		return nil, false
	}
	return o.Composition, true
}

// HasComposition returns a boolean if a field has been set.
func (o *AudienceItem) HasComposition() bool {
	if o != nil && !IsNil(o.Composition) {
		return true
	}

	return false
}

// SetComposition gets a reference to the given []string and assigns it to the Composition field.
func (o *AudienceItem) SetComposition(v []string) {
	o.Composition = v
}

// GetPlatformCode returns the PlatformCode field value if set, zero value otherwise.
func (o *AudienceItem) GetPlatformCode() string {
	if o == nil || IsNil(o.PlatformCode) {
		var ret string
		return ret
	}
	return *o.PlatformCode
}

// GetPlatformCodeOk returns a tuple with the PlatformCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceItem) GetPlatformCodeOk() (*string, bool) {
	if o == nil || IsNil(o.PlatformCode) {
		return nil, false
	}
	return o.PlatformCode, true
}

// HasPlatformCode returns a boolean if a field has been set.
func (o *AudienceItem) HasPlatformCode() bool {
	if o != nil && !IsNil(o.PlatformCode) {
		return true
	}

	return false
}

// SetPlatformCode gets a reference to the given string and assigns it to the PlatformCode field.
func (o *AudienceItem) SetPlatformCode(v string) {
	o.PlatformCode = &v
}

// GetReachStats returns the ReachStats field value if set, zero value otherwise.
func (o *AudienceItem) GetReachStats() AudienceReachStats {
	if o == nil || IsNil(o.ReachStats) {
		var ret AudienceReachStats
		return ret
	}
	return *o.ReachStats
}

// GetReachStatsOk returns a tuple with the ReachStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceItem) GetReachStatsOk() (*AudienceReachStats, bool) {
	if o == nil || IsNil(o.ReachStats) {
		return nil, false
	}
	return o.ReachStats, true
}

// HasReachStats returns a boolean if a field has been set.
func (o *AudienceItem) HasReachStats() bool {
	if o != nil && !IsNil(o.ReachStats) {
		return true
	}

	return false
}

// SetReachStats gets a reference to the given AudienceReachStats and assigns it to the ReachStats field.
func (o *AudienceItem) SetReachStats(v AudienceReachStats) {
	o.ReachStats = &v
}

func (o AudienceItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["display_name"] = o.DisplayName
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Composition) {
		toSerialize["composition"] = o.Composition
	}
	if !IsNil(o.PlatformCode) {
		toSerialize["platform_code"] = o.PlatformCode
	}
	if !IsNil(o.ReachStats) {
		toSerialize["reach_stats"] = o.ReachStats
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AudienceItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"display_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAudienceItem := _AudienceItem{}

	err = json.Unmarshal(data, &varAudienceItem)

	if err != nil {
		return err
	}

	*o = AudienceItem(varAudienceItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "composition")
		delete(additionalProperties, "platform_code")
		delete(additionalProperties, "reach_stats")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAudienceItem struct {
	value *AudienceItem
	isSet bool
}

func (v NullableAudienceItem) Get() *AudienceItem {
	return v.value
}

func (v *NullableAudienceItem) Set(val *AudienceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceItem(val *AudienceItem) *NullableAudienceItem {
	return &NullableAudienceItem{value: val, isSet: true}
}

func (v NullableAudienceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


