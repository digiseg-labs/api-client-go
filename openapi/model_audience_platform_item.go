/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the AudiencePlatformItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudiencePlatformItem{}

// AudiencePlatformItem struct for AudiencePlatformItem
type AudiencePlatformItem struct {
	// A code used to represent the platform when querying platform-specific information
	Code string `json:"code"`
	// Name of the audience platform
	DisplayName string `json:"display_name"`
	// Whether the platform-specific codes for the particular platform are global (or country-specific when NOT global)
	HasGlobalTaxonomy bool `json:"has_global_taxonomy"`
	// A list of supported countries, each represented by their country code
	SupportedCountries []string `json:"supported_countries"`
	AdditionalProperties map[string]interface{}
}

type _AudiencePlatformItem AudiencePlatformItem

// NewAudiencePlatformItem instantiates a new AudiencePlatformItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudiencePlatformItem(code string, displayName string, hasGlobalTaxonomy bool, supportedCountries []string) *AudiencePlatformItem {
	this := AudiencePlatformItem{}
	this.Code = code
	this.DisplayName = displayName
	this.HasGlobalTaxonomy = hasGlobalTaxonomy
	this.SupportedCountries = supportedCountries
	return &this
}

// NewAudiencePlatformItemWithDefaults instantiates a new AudiencePlatformItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudiencePlatformItemWithDefaults() *AudiencePlatformItem {
	this := AudiencePlatformItem{}
	return &this
}

// GetCode returns the Code field value
func (o *AudiencePlatformItem) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AudiencePlatformItem) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AudiencePlatformItem) SetCode(v string) {
	o.Code = v
}

// GetDisplayName returns the DisplayName field value
func (o *AudiencePlatformItem) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *AudiencePlatformItem) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *AudiencePlatformItem) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetHasGlobalTaxonomy returns the HasGlobalTaxonomy field value
func (o *AudiencePlatformItem) GetHasGlobalTaxonomy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.HasGlobalTaxonomy
}

// GetHasGlobalTaxonomyOk returns a tuple with the HasGlobalTaxonomy field value
// and a boolean to check if the value has been set.
func (o *AudiencePlatformItem) GetHasGlobalTaxonomyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HasGlobalTaxonomy, true
}

// SetHasGlobalTaxonomy sets field value
func (o *AudiencePlatformItem) SetHasGlobalTaxonomy(v bool) {
	o.HasGlobalTaxonomy = v
}

// GetSupportedCountries returns the SupportedCountries field value
func (o *AudiencePlatformItem) GetSupportedCountries() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SupportedCountries
}

// GetSupportedCountriesOk returns a tuple with the SupportedCountries field value
// and a boolean to check if the value has been set.
func (o *AudiencePlatformItem) GetSupportedCountriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedCountries, true
}

// SetSupportedCountries sets field value
func (o *AudiencePlatformItem) SetSupportedCountries(v []string) {
	o.SupportedCountries = v
}

func (o AudiencePlatformItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudiencePlatformItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["display_name"] = o.DisplayName
	toSerialize["has_global_taxonomy"] = o.HasGlobalTaxonomy
	toSerialize["supported_countries"] = o.SupportedCountries

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AudiencePlatformItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"display_name",
		"has_global_taxonomy",
		"supported_countries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAudiencePlatformItem := _AudiencePlatformItem{}

	err = json.Unmarshal(data, &varAudiencePlatformItem)

	if err != nil {
		return err
	}

	*o = AudiencePlatformItem(varAudiencePlatformItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "has_global_taxonomy")
		delete(additionalProperties, "supported_countries")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAudiencePlatformItem struct {
	value *AudiencePlatformItem
	isSet bool
}

func (v NullableAudiencePlatformItem) Get() *AudiencePlatformItem {
	return v.value
}

func (v *NullableAudiencePlatformItem) Set(val *AudiencePlatformItem) {
	v.value = val
	v.isSet = true
}

func (v NullableAudiencePlatformItem) IsSet() bool {
	return v.isSet
}

func (v *NullableAudiencePlatformItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudiencePlatformItem(val *AudiencePlatformItem) *NullableAudiencePlatformItem {
	return &NullableAudiencePlatformItem{value: val, isSet: true}
}

func (v NullableAudiencePlatformItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudiencePlatformItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


