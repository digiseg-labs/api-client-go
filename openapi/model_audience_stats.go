/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AudienceStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceStats{}

// AudienceStats struct for AudienceStats
type AudienceStats struct {
	// Measurements related to this object
	Measurements []Measurement `json:"measurements"`
	Comparisons []Comparison `json:"comparisons,omitempty"`
	// The code of the audience
	Code string `json:"code"`
	// The name of the audience
	Name string `json:"name"`
}

type _AudienceStats AudienceStats

// NewAudienceStats instantiates a new AudienceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceStats(measurements []Measurement, code string, name string) *AudienceStats {
	this := AudienceStats{}
	this.Measurements = measurements
	this.Code = code
	this.Name = name
	return &this
}

// NewAudienceStatsWithDefaults instantiates a new AudienceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceStatsWithDefaults() *AudienceStats {
	this := AudienceStats{}
	return &this
}

// GetMeasurements returns the Measurements field value
func (o *AudienceStats) GetMeasurements() []Measurement {
	if o == nil {
		var ret []Measurement
		return ret
	}

	return o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetMeasurementsOk() ([]Measurement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Measurements, true
}

// SetMeasurements sets field value
func (o *AudienceStats) SetMeasurements(v []Measurement) {
	o.Measurements = v
}

// GetComparisons returns the Comparisons field value if set, zero value otherwise.
func (o *AudienceStats) GetComparisons() []Comparison {
	if o == nil || IsNil(o.Comparisons) {
		var ret []Comparison
		return ret
	}
	return o.Comparisons
}

// GetComparisonsOk returns a tuple with the Comparisons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetComparisonsOk() ([]Comparison, bool) {
	if o == nil || IsNil(o.Comparisons) {
		return nil, false
	}
	return o.Comparisons, true
}

// HasComparisons returns a boolean if a field has been set.
func (o *AudienceStats) HasComparisons() bool {
	if o != nil && !IsNil(o.Comparisons) {
		return true
	}

	return false
}

// SetComparisons gets a reference to the given []Comparison and assigns it to the Comparisons field.
func (o *AudienceStats) SetComparisons(v []Comparison) {
	o.Comparisons = v
}

// GetCode returns the Code field value
func (o *AudienceStats) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *AudienceStats) SetCode(v string) {
	o.Code = v
}

// GetName returns the Name field value
func (o *AudienceStats) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AudienceStats) SetName(v string) {
	o.Name = v
}

func (o AudienceStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["measurements"] = o.Measurements
	if !IsNil(o.Comparisons) {
		toSerialize["comparisons"] = o.Comparisons
	}
	toSerialize["code"] = o.Code
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *AudienceStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"measurements",
		"code",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAudienceStats := _AudienceStats{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAudienceStats)

	if err != nil {
		return err
	}

	*o = AudienceStats(varAudienceStats)

	return err
}

type NullableAudienceStats struct {
	value *AudienceStats
	isSet bool
}

func (v NullableAudienceStats) Get() *AudienceStats {
	return v.value
}

func (v *NullableAudienceStats) Set(val *AudienceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceStats(val *AudienceStats) *NullableAudienceStats {
	return &NullableAudienceStats{value: val, isSet: true}
}

func (v NullableAudienceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


