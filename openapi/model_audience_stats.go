/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AudienceStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AudienceStats{}

// AudienceStats struct for AudienceStats
type AudienceStats struct {
	// Measurements related to this object
	Measurements []Measurement `json:"measurements,omitempty"`
	Comparisons []Comparison `json:"comparisons,omitempty"`
	// The code of the audience
	Code *string `json:"code,omitempty"`
}

// NewAudienceStats instantiates a new AudienceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAudienceStats() *AudienceStats {
	this := AudienceStats{}
	return &this
}

// NewAudienceStatsWithDefaults instantiates a new AudienceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAudienceStatsWithDefaults() *AudienceStats {
	this := AudienceStats{}
	return &this
}

// GetMeasurements returns the Measurements field value if set, zero value otherwise.
func (o *AudienceStats) GetMeasurements() []Measurement {
	if o == nil || IsNil(o.Measurements) {
		var ret []Measurement
		return ret
	}
	return o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetMeasurementsOk() ([]Measurement, bool) {
	if o == nil || IsNil(o.Measurements) {
		return nil, false
	}
	return o.Measurements, true
}

// HasMeasurements returns a boolean if a field has been set.
func (o *AudienceStats) HasMeasurements() bool {
	if o != nil && !IsNil(o.Measurements) {
		return true
	}

	return false
}

// SetMeasurements gets a reference to the given []Measurement and assigns it to the Measurements field.
func (o *AudienceStats) SetMeasurements(v []Measurement) {
	o.Measurements = v
}

// GetComparisons returns the Comparisons field value if set, zero value otherwise.
func (o *AudienceStats) GetComparisons() []Comparison {
	if o == nil || IsNil(o.Comparisons) {
		var ret []Comparison
		return ret
	}
	return o.Comparisons
}

// GetComparisonsOk returns a tuple with the Comparisons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetComparisonsOk() ([]Comparison, bool) {
	if o == nil || IsNil(o.Comparisons) {
		return nil, false
	}
	return o.Comparisons, true
}

// HasComparisons returns a boolean if a field has been set.
func (o *AudienceStats) HasComparisons() bool {
	if o != nil && !IsNil(o.Comparisons) {
		return true
	}

	return false
}

// SetComparisons gets a reference to the given []Comparison and assigns it to the Comparisons field.
func (o *AudienceStats) SetComparisons(v []Comparison) {
	o.Comparisons = v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AudienceStats) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AudienceStats) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AudienceStats) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AudienceStats) SetCode(v string) {
	o.Code = &v
}

func (o AudienceStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AudienceStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Measurements) {
		toSerialize["measurements"] = o.Measurements
	}
	if !IsNil(o.Comparisons) {
		toSerialize["comparisons"] = o.Comparisons
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullableAudienceStats struct {
	value *AudienceStats
	isSet bool
}

func (v NullableAudienceStats) Get() *AudienceStats {
	return v.value
}

func (v *NullableAudienceStats) Set(val *AudienceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableAudienceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableAudienceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAudienceStats(val *AudienceStats) *NullableAudienceStats {
	return &NullableAudienceStats{value: val, isSet: true}
}

func (v NullableAudienceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAudienceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


