/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CampaignAudienceStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CampaignAudienceStats{}

// CampaignAudienceStats struct for CampaignAudienceStats
type CampaignAudienceStats struct {
	NotResolved *MeasurementsContainer `json:"not_resolved,omitempty"`
	Business *BusinessAudienceStats `json:"business,omitempty"`
	Private *PrivateAudienceStats `json:"private,omitempty"`
}

// NewCampaignAudienceStats instantiates a new CampaignAudienceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCampaignAudienceStats() *CampaignAudienceStats {
	this := CampaignAudienceStats{}
	return &this
}

// NewCampaignAudienceStatsWithDefaults instantiates a new CampaignAudienceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCampaignAudienceStatsWithDefaults() *CampaignAudienceStats {
	this := CampaignAudienceStats{}
	return &this
}

// GetNotResolved returns the NotResolved field value if set, zero value otherwise.
func (o *CampaignAudienceStats) GetNotResolved() MeasurementsContainer {
	if o == nil || IsNil(o.NotResolved) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.NotResolved
}

// GetNotResolvedOk returns a tuple with the NotResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignAudienceStats) GetNotResolvedOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.NotResolved) {
		return nil, false
	}
	return o.NotResolved, true
}

// HasNotResolved returns a boolean if a field has been set.
func (o *CampaignAudienceStats) HasNotResolved() bool {
	if o != nil && !IsNil(o.NotResolved) {
		return true
	}

	return false
}

// SetNotResolved gets a reference to the given MeasurementsContainer and assigns it to the NotResolved field.
func (o *CampaignAudienceStats) SetNotResolved(v MeasurementsContainer) {
	o.NotResolved = &v
}

// GetBusiness returns the Business field value if set, zero value otherwise.
func (o *CampaignAudienceStats) GetBusiness() BusinessAudienceStats {
	if o == nil || IsNil(o.Business) {
		var ret BusinessAudienceStats
		return ret
	}
	return *o.Business
}

// GetBusinessOk returns a tuple with the Business field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignAudienceStats) GetBusinessOk() (*BusinessAudienceStats, bool) {
	if o == nil || IsNil(o.Business) {
		return nil, false
	}
	return o.Business, true
}

// HasBusiness returns a boolean if a field has been set.
func (o *CampaignAudienceStats) HasBusiness() bool {
	if o != nil && !IsNil(o.Business) {
		return true
	}

	return false
}

// SetBusiness gets a reference to the given BusinessAudienceStats and assigns it to the Business field.
func (o *CampaignAudienceStats) SetBusiness(v BusinessAudienceStats) {
	o.Business = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *CampaignAudienceStats) GetPrivate() PrivateAudienceStats {
	if o == nil || IsNil(o.Private) {
		var ret PrivateAudienceStats
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CampaignAudienceStats) GetPrivateOk() (*PrivateAudienceStats, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *CampaignAudienceStats) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given PrivateAudienceStats and assigns it to the Private field.
func (o *CampaignAudienceStats) SetPrivate(v PrivateAudienceStats) {
	o.Private = &v
}

func (o CampaignAudienceStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CampaignAudienceStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NotResolved) {
		toSerialize["not_resolved"] = o.NotResolved
	}
	if !IsNil(o.Business) {
		toSerialize["business"] = o.Business
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	return toSerialize, nil
}

type NullableCampaignAudienceStats struct {
	value *CampaignAudienceStats
	isSet bool
}

func (v NullableCampaignAudienceStats) Get() *CampaignAudienceStats {
	return v.value
}

func (v *NullableCampaignAudienceStats) Set(val *CampaignAudienceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignAudienceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignAudienceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignAudienceStats(val *CampaignAudienceStats) *NullableCampaignAudienceStats {
	return &NullableCampaignAudienceStats{value: val, isSet: true}
}

func (v NullableCampaignAudienceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignAudienceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


