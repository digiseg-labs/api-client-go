/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CampaignIngestionStatus The status of the data collection of the campaign, indicating whether stats are available and representative.  * `no_data` means that the campaign has been created but no data has been received. * `active_ramping_up` means that data has been received, but not enough to provide meaningful stats yet. * `active_fulfilled` means that the campaign has received a good amount of data, but more data can still be added. * `finished_complete` means that the campaign has finished and is no longer open to receive data. * `finished_expired` means that the campaign has finished but not enough data was collected to provide meaningful stats. 
type CampaignIngestionStatus string

// List of CampaignIngestionStatus
const (
	NO_DATA CampaignIngestionStatus = "no_data"
	ACTIVE_RAMPING_UP CampaignIngestionStatus = "active_ramping_up"
	ACTIVE_FULFILLED CampaignIngestionStatus = "active_fulfilled"
	FINISHED_COMPLETE CampaignIngestionStatus = "finished_complete"
	FINISHED_EXPIRED CampaignIngestionStatus = "finished_expired"
)

// All allowed values of CampaignIngestionStatus enum
var AllowedCampaignIngestionStatusEnumValues = []CampaignIngestionStatus{
	"no_data",
	"active_ramping_up",
	"active_fulfilled",
	"finished_complete",
	"finished_expired",
}

func (v *CampaignIngestionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CampaignIngestionStatus(value)
	for _, existing := range AllowedCampaignIngestionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CampaignIngestionStatus", value)
}

// NewCampaignIngestionStatusFromValue returns a pointer to a valid CampaignIngestionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCampaignIngestionStatusFromValue(v string) (*CampaignIngestionStatus, error) {
	ev := CampaignIngestionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CampaignIngestionStatus: valid values are %v", v, AllowedCampaignIngestionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CampaignIngestionStatus) IsValid() bool {
	for _, existing := range AllowedCampaignIngestionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CampaignIngestionStatus value
func (v CampaignIngestionStatus) Ptr() *CampaignIngestionStatus {
	return &v
}

type NullableCampaignIngestionStatus struct {
	value *CampaignIngestionStatus
	isSet bool
}

func (v NullableCampaignIngestionStatus) Get() *CampaignIngestionStatus {
	return v.value
}

func (v *NullableCampaignIngestionStatus) Set(val *CampaignIngestionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCampaignIngestionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCampaignIngestionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCampaignIngestionStatus(val *CampaignIngestionStatus) *NullableCampaignIngestionStatus {
	return &NullableCampaignIngestionStatus{value: val, isSet: true}
}

func (v NullableCampaignIngestionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCampaignIngestionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

