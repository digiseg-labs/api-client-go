/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CategoryPopulationsFull type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryPopulationsFull{}

// CategoryPopulationsFull struct for CategoryPopulationsFull
type CategoryPopulationsFull struct {
	Populations []PopulationItem `json:"populations,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CategoryPopulationsFull CategoryPopulationsFull

// NewCategoryPopulationsFull instantiates a new CategoryPopulationsFull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryPopulationsFull() *CategoryPopulationsFull {
	this := CategoryPopulationsFull{}
	return &this
}

// NewCategoryPopulationsFullWithDefaults instantiates a new CategoryPopulationsFull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryPopulationsFullWithDefaults() *CategoryPopulationsFull {
	this := CategoryPopulationsFull{}
	return &this
}

// GetPopulations returns the Populations field value if set, zero value otherwise.
func (o *CategoryPopulationsFull) GetPopulations() []PopulationItem {
	if o == nil || IsNil(o.Populations) {
		var ret []PopulationItem
		return ret
	}
	return o.Populations
}

// GetPopulationsOk returns a tuple with the Populations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoryPopulationsFull) GetPopulationsOk() ([]PopulationItem, bool) {
	if o == nil || IsNil(o.Populations) {
		return nil, false
	}
	return o.Populations, true
}

// HasPopulations returns a boolean if a field has been set.
func (o *CategoryPopulationsFull) HasPopulations() bool {
	if o != nil && !IsNil(o.Populations) {
		return true
	}

	return false
}

// SetPopulations gets a reference to the given []PopulationItem and assigns it to the Populations field.
func (o *CategoryPopulationsFull) SetPopulations(v []PopulationItem) {
	o.Populations = v
}

func (o CategoryPopulationsFull) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryPopulationsFull) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Populations) {
		toSerialize["populations"] = o.Populations
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CategoryPopulationsFull) UnmarshalJSON(data []byte) (err error) {
	varCategoryPopulationsFull := _CategoryPopulationsFull{}

	err = json.Unmarshal(data, &varCategoryPopulationsFull)

	if err != nil {
		return err
	}

	*o = CategoryPopulationsFull(varCategoryPopulationsFull)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "populations")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCategoryPopulationsFull struct {
	value *CategoryPopulationsFull
	isSet bool
}

func (v NullableCategoryPopulationsFull) Get() *CategoryPopulationsFull {
	return v.value
}

func (v *NullableCategoryPopulationsFull) Set(val *CategoryPopulationsFull) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryPopulationsFull) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryPopulationsFull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryPopulationsFull(val *CategoryPopulationsFull) *NullableCategoryPopulationsFull {
	return &NullableCategoryPopulationsFull{value: val, isSet: true}
}

func (v NullableCategoryPopulationsFull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryPopulationsFull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


