/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CompanySize Describes the size of a company
type CompanySize string

// List of CompanySize
const (
	SELF_EMPLOYED CompanySize = "Self-employed"
	_1_10_EMPLOYEES CompanySize = "1-10 employees"
	_11_50_EMPLOYEES CompanySize = "11-50 employees"
	_51_200_EMPLOYEES CompanySize = "51-200 employees"
	_201_500_EMPLOYEES CompanySize = "201-500 employees"
	_501_1000_EMPLOYEES CompanySize = "501-1000 employees"
	_1001_5000_EMPLOYEES CompanySize = "1001-5000 employees"
	_5001_10000_EMPLOYEES CompanySize = "5001-10,000 employees"
	_10001_EMPLOYEES CompanySize = "10,001+ employees"
)

// All allowed values of CompanySize enum
var AllowedCompanySizeEnumValues = []CompanySize{
	"Self-employed",
	"1-10 employees",
	"11-50 employees",
	"51-200 employees",
	"201-500 employees",
	"501-1000 employees",
	"1001-5000 employees",
	"5001-10,000 employees",
	"10,001+ employees",
}

func (v *CompanySize) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompanySize(value)
	for _, existing := range AllowedCompanySizeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompanySize", value)
}

// NewCompanySizeFromValue returns a pointer to a valid CompanySize
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompanySizeFromValue(v string) (*CompanySize, error) {
	ev := CompanySize(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompanySize: valid values are %v", v, AllowedCompanySizeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompanySize) IsValid() bool {
	for _, existing := range AllowedCompanySizeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompanySize value
func (v CompanySize) Ptr() *CompanySize {
	return &v
}

type NullableCompanySize struct {
	value *CompanySize
	isSet bool
}

func (v NullableCompanySize) Get() *CompanySize {
	return v.value
}

func (v *NullableCompanySize) Set(val *CompanySize) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanySize) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanySize) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanySize(val *CompanySize) *NullableCompanySize {
	return &NullableCompanySize{value: val, isSet: true}
}

func (v NullableCompanySize) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanySize) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

