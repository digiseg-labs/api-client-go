/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DayOfWeekStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DayOfWeekStats{}

// DayOfWeekStats Contains statistics about the week days that study activity has been measured. The time zone used to record these measurements is the time zone of the measured user, or UTC if the user's location cannot be resolved. 
type DayOfWeekStats struct {
	Monday *MeasurementsContainer `json:"Monday,omitempty"`
	Tuesday *MeasurementsContainer `json:"Tuesday,omitempty"`
	Wednesday *MeasurementsContainer `json:"Wednesday,omitempty"`
	Thursday *MeasurementsContainer `json:"Thursday,omitempty"`
	Friday *MeasurementsContainer `json:"Friday,omitempty"`
	Saturday *MeasurementsContainer `json:"Saturday,omitempty"`
	Sunday *MeasurementsContainer `json:"Sunday,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DayOfWeekStats DayOfWeekStats

// NewDayOfWeekStats instantiates a new DayOfWeekStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDayOfWeekStats() *DayOfWeekStats {
	this := DayOfWeekStats{}
	return &this
}

// NewDayOfWeekStatsWithDefaults instantiates a new DayOfWeekStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDayOfWeekStatsWithDefaults() *DayOfWeekStats {
	this := DayOfWeekStats{}
	return &this
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetMonday() MeasurementsContainer {
	if o == nil || IsNil(o.Monday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetMondayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given MeasurementsContainer and assigns it to the Monday field.
func (o *DayOfWeekStats) SetMonday(v MeasurementsContainer) {
	o.Monday = &v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetTuesday() MeasurementsContainer {
	if o == nil || IsNil(o.Tuesday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetTuesdayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given MeasurementsContainer and assigns it to the Tuesday field.
func (o *DayOfWeekStats) SetTuesday(v MeasurementsContainer) {
	o.Tuesday = &v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetWednesday() MeasurementsContainer {
	if o == nil || IsNil(o.Wednesday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetWednesdayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given MeasurementsContainer and assigns it to the Wednesday field.
func (o *DayOfWeekStats) SetWednesday(v MeasurementsContainer) {
	o.Wednesday = &v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetThursday() MeasurementsContainer {
	if o == nil || IsNil(o.Thursday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetThursdayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given MeasurementsContainer and assigns it to the Thursday field.
func (o *DayOfWeekStats) SetThursday(v MeasurementsContainer) {
	o.Thursday = &v
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetFriday() MeasurementsContainer {
	if o == nil || IsNil(o.Friday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetFridayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given MeasurementsContainer and assigns it to the Friday field.
func (o *DayOfWeekStats) SetFriday(v MeasurementsContainer) {
	o.Friday = &v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetSaturday() MeasurementsContainer {
	if o == nil || IsNil(o.Saturday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetSaturdayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given MeasurementsContainer and assigns it to the Saturday field.
func (o *DayOfWeekStats) SetSaturday(v MeasurementsContainer) {
	o.Saturday = &v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *DayOfWeekStats) GetSunday() MeasurementsContainer {
	if o == nil || IsNil(o.Sunday) {
		var ret MeasurementsContainer
		return ret
	}
	return *o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DayOfWeekStats) GetSundayOk() (*MeasurementsContainer, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *DayOfWeekStats) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given MeasurementsContainer and assigns it to the Sunday field.
func (o *DayOfWeekStats) SetSunday(v MeasurementsContainer) {
	o.Sunday = &v
}

func (o DayOfWeekStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DayOfWeekStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Monday) {
		toSerialize["Monday"] = o.Monday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["Tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["Wednesday"] = o.Wednesday
	}
	if !IsNil(o.Thursday) {
		toSerialize["Thursday"] = o.Thursday
	}
	if !IsNil(o.Friday) {
		toSerialize["Friday"] = o.Friday
	}
	if !IsNil(o.Saturday) {
		toSerialize["Saturday"] = o.Saturday
	}
	if !IsNil(o.Sunday) {
		toSerialize["Sunday"] = o.Sunday
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DayOfWeekStats) UnmarshalJSON(data []byte) (err error) {
	varDayOfWeekStats := _DayOfWeekStats{}

	err = json.Unmarshal(data, &varDayOfWeekStats)

	if err != nil {
		return err
	}

	*o = DayOfWeekStats(varDayOfWeekStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Monday")
		delete(additionalProperties, "Tuesday")
		delete(additionalProperties, "Wednesday")
		delete(additionalProperties, "Thursday")
		delete(additionalProperties, "Friday")
		delete(additionalProperties, "Saturday")
		delete(additionalProperties, "Sunday")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDayOfWeekStats struct {
	value *DayOfWeekStats
	isSet bool
}

func (v NullableDayOfWeekStats) Get() *DayOfWeekStats {
	return v.value
}

func (v *NullableDayOfWeekStats) Set(val *DayOfWeekStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDayOfWeekStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDayOfWeekStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDayOfWeekStats(val *DayOfWeekStats) *NullableDayOfWeekStats {
	return &NullableDayOfWeekStats{value: val, isSet: true}
}

func (v NullableDayOfWeekStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDayOfWeekStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


