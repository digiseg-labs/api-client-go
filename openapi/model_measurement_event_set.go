/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MeasurementEventSet The set of events to create for the study. 
type MeasurementEventSet string

// List of MeasurementEventSet
const (
	MEASUREMENTEVENTSET_IMPRESSIONS_ONLY MeasurementEventSet = "impressions_only"
	MEASUREMENTEVENTSET_IMPRESSIONS_AND_CLICKS MeasurementEventSet = "impressions_and_clicks"
)

// All allowed values of MeasurementEventSet enum
var AllowedMeasurementEventSetEnumValues = []MeasurementEventSet{
	"impressions_only",
	"impressions_and_clicks",
}

func (v *MeasurementEventSet) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MeasurementEventSet(value)
	for _, existing := range AllowedMeasurementEventSetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MeasurementEventSet", value)
}

// NewMeasurementEventSetFromValue returns a pointer to a valid MeasurementEventSet
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMeasurementEventSetFromValue(v string) (*MeasurementEventSet, error) {
	ev := MeasurementEventSet(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MeasurementEventSet: valid values are %v", v, AllowedMeasurementEventSetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MeasurementEventSet) IsValid() bool {
	for _, existing := range AllowedMeasurementEventSetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MeasurementEventSet value
func (v MeasurementEventSet) Ptr() *MeasurementEventSet {
	return &v
}

type NullableMeasurementEventSet struct {
	value *MeasurementEventSet
	isSet bool
}

func (v NullableMeasurementEventSet) Get() *MeasurementEventSet {
	return v.value
}

func (v *NullableMeasurementEventSet) Set(val *MeasurementEventSet) {
	v.value = val
	v.isSet = true
}

func (v NullableMeasurementEventSet) IsSet() bool {
	return v.isSet
}

func (v *NullableMeasurementEventSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeasurementEventSet(val *MeasurementEventSet) *NullableMeasurementEventSet {
	return &NullableMeasurementEventSet{value: val, isSet: true}
}

func (v NullableMeasurementEventSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeasurementEventSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

