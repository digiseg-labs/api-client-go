/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionScopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionScopes{}

// PermissionScopes Defines the scopes of a token or API key. If omitted, the default set of grants that are available to non-admin and non-owner users of the account will be added.
type PermissionScopes struct {
	// A list of origin domains that will be allowed access through CORS and Referrer checks with the token or API key. A missing value, empty array or the value `*` grants access from any domain.
	OriginDomains []string `json:"origin_domains,omitempty"`
	// A list of service grants to allow access to use. A missing value, empty array or the value `*` grants access to all of the services that are available to non-admin and non-owner users of the account.
	ServiceGrants []string `json:"service_grants,omitempty"`
	// A list of country-specific data sources to allow access to. A missing value, empty array or the value `*` grants access to any data source.
	CountryData []string `json:"country_data,omitempty"`
}

// NewPermissionScopes instantiates a new PermissionScopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionScopes() *PermissionScopes {
	this := PermissionScopes{}
	return &this
}

// NewPermissionScopesWithDefaults instantiates a new PermissionScopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionScopesWithDefaults() *PermissionScopes {
	this := PermissionScopes{}
	return &this
}

// GetOriginDomains returns the OriginDomains field value if set, zero value otherwise.
func (o *PermissionScopes) GetOriginDomains() []string {
	if o == nil || IsNil(o.OriginDomains) {
		var ret []string
		return ret
	}
	return o.OriginDomains
}

// GetOriginDomainsOk returns a tuple with the OriginDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionScopes) GetOriginDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.OriginDomains) {
		return nil, false
	}
	return o.OriginDomains, true
}

// HasOriginDomains returns a boolean if a field has been set.
func (o *PermissionScopes) HasOriginDomains() bool {
	if o != nil && !IsNil(o.OriginDomains) {
		return true
	}

	return false
}

// SetOriginDomains gets a reference to the given []string and assigns it to the OriginDomains field.
func (o *PermissionScopes) SetOriginDomains(v []string) {
	o.OriginDomains = v
}

// GetServiceGrants returns the ServiceGrants field value if set, zero value otherwise.
func (o *PermissionScopes) GetServiceGrants() []string {
	if o == nil || IsNil(o.ServiceGrants) {
		var ret []string
		return ret
	}
	return o.ServiceGrants
}

// GetServiceGrantsOk returns a tuple with the ServiceGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionScopes) GetServiceGrantsOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceGrants) {
		return nil, false
	}
	return o.ServiceGrants, true
}

// HasServiceGrants returns a boolean if a field has been set.
func (o *PermissionScopes) HasServiceGrants() bool {
	if o != nil && !IsNil(o.ServiceGrants) {
		return true
	}

	return false
}

// SetServiceGrants gets a reference to the given []string and assigns it to the ServiceGrants field.
func (o *PermissionScopes) SetServiceGrants(v []string) {
	o.ServiceGrants = v
}

// GetCountryData returns the CountryData field value if set, zero value otherwise.
func (o *PermissionScopes) GetCountryData() []string {
	if o == nil || IsNil(o.CountryData) {
		var ret []string
		return ret
	}
	return o.CountryData
}

// GetCountryDataOk returns a tuple with the CountryData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionScopes) GetCountryDataOk() ([]string, bool) {
	if o == nil || IsNil(o.CountryData) {
		return nil, false
	}
	return o.CountryData, true
}

// HasCountryData returns a boolean if a field has been set.
func (o *PermissionScopes) HasCountryData() bool {
	if o != nil && !IsNil(o.CountryData) {
		return true
	}

	return false
}

// SetCountryData gets a reference to the given []string and assigns it to the CountryData field.
func (o *PermissionScopes) SetCountryData(v []string) {
	o.CountryData = v
}

func (o PermissionScopes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionScopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginDomains) {
		toSerialize["origin_domains"] = o.OriginDomains
	}
	if !IsNil(o.ServiceGrants) {
		toSerialize["service_grants"] = o.ServiceGrants
	}
	if !IsNil(o.CountryData) {
		toSerialize["country_data"] = o.CountryData
	}
	return toSerialize, nil
}

type NullablePermissionScopes struct {
	value *PermissionScopes
	isSet bool
}

func (v NullablePermissionScopes) Get() *PermissionScopes {
	return v.value
}

func (v *NullablePermissionScopes) Set(val *PermissionScopes) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionScopes) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionScopes(val *PermissionScopes) *NullablePermissionScopes {
	return &NullablePermissionScopes{value: val, isSet: true}
}

func (v NullablePermissionScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


