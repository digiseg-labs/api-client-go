/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PermissionScopes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionScopes{}

// PermissionScopes Defines the scopes of a token or API key. If omitted, the default set of grants that are available to non-admin and non-owner users of the account will be added.
type PermissionScopes struct {
	// A list of origin domains that will be allowed access through CORS and Referrer checks with the token or API key. A missing value, empty array or the value `*` grants access from any domain.
	OriginDomains []string `json:"origin_domains,omitempty"`
	// A list of service grants to allow access to use. A missing value, empty array or the value `*` grants access to all of the services that are available to non-admin and non-owner users of the account.
	ServiceGrants []string `json:"service_grants,omitempty"`
	// A list of country-specific data sources to allow access to. A missing value, empty array or the value `*` grants access to any data source.
	CountryData []string `json:"country_data,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PermissionScopes PermissionScopes

// NewPermissionScopes instantiates a new PermissionScopes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionScopes() *PermissionScopes {
	this := PermissionScopes{}
	return &this
}

// NewPermissionScopesWithDefaults instantiates a new PermissionScopes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionScopesWithDefaults() *PermissionScopes {
	this := PermissionScopes{}
	return &this
}

// GetOriginDomains returns the OriginDomains field value if set, zero value otherwise.
func (o *PermissionScopes) GetOriginDomains() []string {
	if o == nil || IsNil(o.OriginDomains) {
		var ret []string
		return ret
	}
	return o.OriginDomains
}

// GetOriginDomainsOk returns a tuple with the OriginDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionScopes) GetOriginDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.OriginDomains) {
		return nil, false
	}
	return o.OriginDomains, true
}

// HasOriginDomains returns a boolean if a field has been set.
func (o *PermissionScopes) HasOriginDomains() bool {
	if o != nil && !IsNil(o.OriginDomains) {
		return true
	}

	return false
}

// SetOriginDomains gets a reference to the given []string and assigns it to the OriginDomains field.
func (o *PermissionScopes) SetOriginDomains(v []string) {
	o.OriginDomains = v
}

// GetServiceGrants returns the ServiceGrants field value if set, zero value otherwise.
func (o *PermissionScopes) GetServiceGrants() []string {
	if o == nil || IsNil(o.ServiceGrants) {
		var ret []string
		return ret
	}
	return o.ServiceGrants
}

// GetServiceGrantsOk returns a tuple with the ServiceGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionScopes) GetServiceGrantsOk() ([]string, bool) {
	if o == nil || IsNil(o.ServiceGrants) {
		return nil, false
	}
	return o.ServiceGrants, true
}

// HasServiceGrants returns a boolean if a field has been set.
func (o *PermissionScopes) HasServiceGrants() bool {
	if o != nil && !IsNil(o.ServiceGrants) {
		return true
	}

	return false
}

// SetServiceGrants gets a reference to the given []string and assigns it to the ServiceGrants field.
func (o *PermissionScopes) SetServiceGrants(v []string) {
	o.ServiceGrants = v
}

// GetCountryData returns the CountryData field value if set, zero value otherwise.
func (o *PermissionScopes) GetCountryData() []string {
	if o == nil || IsNil(o.CountryData) {
		var ret []string
		return ret
	}
	return o.CountryData
}

// GetCountryDataOk returns a tuple with the CountryData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionScopes) GetCountryDataOk() ([]string, bool) {
	if o == nil || IsNil(o.CountryData) {
		return nil, false
	}
	return o.CountryData, true
}

// HasCountryData returns a boolean if a field has been set.
func (o *PermissionScopes) HasCountryData() bool {
	if o != nil && !IsNil(o.CountryData) {
		return true
	}

	return false
}

// SetCountryData gets a reference to the given []string and assigns it to the CountryData field.
func (o *PermissionScopes) SetCountryData(v []string) {
	o.CountryData = v
}

func (o PermissionScopes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionScopes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginDomains) {
		toSerialize["origin_domains"] = o.OriginDomains
	}
	if !IsNil(o.ServiceGrants) {
		toSerialize["service_grants"] = o.ServiceGrants
	}
	if !IsNil(o.CountryData) {
		toSerialize["country_data"] = o.CountryData
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PermissionScopes) UnmarshalJSON(data []byte) (err error) {
	varPermissionScopes := _PermissionScopes{}

	err = json.Unmarshal(data, &varPermissionScopes)

	if err != nil {
		return err
	}

	*o = PermissionScopes(varPermissionScopes)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "origin_domains")
		delete(additionalProperties, "service_grants")
		delete(additionalProperties, "country_data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePermissionScopes struct {
	value *PermissionScopes
	isSet bool
}

func (v NullablePermissionScopes) Get() *PermissionScopes {
	return v.value
}

func (v *NullablePermissionScopes) Set(val *PermissionScopes) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionScopes) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionScopes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionScopes(val *PermissionScopes) *NullablePermissionScopes {
	return &NullablePermissionScopes{value: val, isSet: true}
}

func (v NullablePermissionScopes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionScopes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


