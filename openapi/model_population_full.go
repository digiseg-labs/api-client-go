/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PopulationFull type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PopulationFull{}

// PopulationFull Describes the audience composition of a population. Every metric is delivered in relative measures (ie. fractions of total rather than counts) to make enable the comparison or adjustment of populations. 
type PopulationFull struct {
	// A humanly readable name of the population
	Name *string `json:"name,omitempty"`
	Private *PopulationAudienceCategorySetSection `json:"private,omitempty"`
	Business *PopulationAudienceCategorySetSection `json:"business,omitempty"`
}

// NewPopulationFull instantiates a new PopulationFull object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulationFull() *PopulationFull {
	this := PopulationFull{}
	return &this
}

// NewPopulationFullWithDefaults instantiates a new PopulationFull object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationFullWithDefaults() *PopulationFull {
	this := PopulationFull{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PopulationFull) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopulationFull) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PopulationFull) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PopulationFull) SetName(v string) {
	o.Name = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *PopulationFull) GetPrivate() PopulationAudienceCategorySetSection {
	if o == nil || IsNil(o.Private) {
		var ret PopulationAudienceCategorySetSection
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopulationFull) GetPrivateOk() (*PopulationAudienceCategorySetSection, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *PopulationFull) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given PopulationAudienceCategorySetSection and assigns it to the Private field.
func (o *PopulationFull) SetPrivate(v PopulationAudienceCategorySetSection) {
	o.Private = &v
}

// GetBusiness returns the Business field value if set, zero value otherwise.
func (o *PopulationFull) GetBusiness() PopulationAudienceCategorySetSection {
	if o == nil || IsNil(o.Business) {
		var ret PopulationAudienceCategorySetSection
		return ret
	}
	return *o.Business
}

// GetBusinessOk returns a tuple with the Business field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopulationFull) GetBusinessOk() (*PopulationAudienceCategorySetSection, bool) {
	if o == nil || IsNil(o.Business) {
		return nil, false
	}
	return o.Business, true
}

// HasBusiness returns a boolean if a field has been set.
func (o *PopulationFull) HasBusiness() bool {
	if o != nil && !IsNil(o.Business) {
		return true
	}

	return false
}

// SetBusiness gets a reference to the given PopulationAudienceCategorySetSection and assigns it to the Business field.
func (o *PopulationFull) SetBusiness(v PopulationAudienceCategorySetSection) {
	o.Business = &v
}

func (o PopulationFull) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PopulationFull) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Business) {
		toSerialize["business"] = o.Business
	}
	return toSerialize, nil
}

type NullablePopulationFull struct {
	value *PopulationFull
	isSet bool
}

func (v NullablePopulationFull) Get() *PopulationFull {
	return v.value
}

func (v *NullablePopulationFull) Set(val *PopulationFull) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulationFull) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulationFull) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulationFull(val *PopulationFull) *NullablePopulationFull {
	return &NullablePopulationFull{value: val, isSet: true}
}

func (v NullablePopulationFull) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulationFull) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


