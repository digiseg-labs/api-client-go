/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PopulationSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PopulationSource{}

// PopulationSource Source data for a population
type PopulationSource struct {
	// A humanly readable name of the population
	Name string `json:"name"`
	// Name or description of the data source
	Source string `json:"source"`
	Meta map[string]interface{} `json:"meta"`
	NotResolved *PopulationSourceNotResolvedSection `json:"not_resolved,omitempty"`
	Private PopulationSourcePrivateSection `json:"private"`
	Business PopulationSourceBusinessSection `json:"business"`
}

type _PopulationSource PopulationSource

// NewPopulationSource instantiates a new PopulationSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulationSource(name string, source string, meta map[string]interface{}, private PopulationSourcePrivateSection, business PopulationSourceBusinessSection) *PopulationSource {
	this := PopulationSource{}
	this.Name = name
	this.Source = source
	this.Meta = meta
	this.Private = private
	this.Business = business
	return &this
}

// NewPopulationSourceWithDefaults instantiates a new PopulationSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationSourceWithDefaults() *PopulationSource {
	this := PopulationSource{}
	return &this
}

// GetName returns the Name field value
func (o *PopulationSource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PopulationSource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PopulationSource) SetName(v string) {
	o.Name = v
}

// GetSource returns the Source field value
func (o *PopulationSource) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *PopulationSource) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *PopulationSource) SetSource(v string) {
	o.Source = v
}

// GetMeta returns the Meta field value
func (o *PopulationSource) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *PopulationSource) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// SetMeta sets field value
func (o *PopulationSource) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetNotResolved returns the NotResolved field value if set, zero value otherwise.
func (o *PopulationSource) GetNotResolved() PopulationSourceNotResolvedSection {
	if o == nil || IsNil(o.NotResolved) {
		var ret PopulationSourceNotResolvedSection
		return ret
	}
	return *o.NotResolved
}

// GetNotResolvedOk returns a tuple with the NotResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopulationSource) GetNotResolvedOk() (*PopulationSourceNotResolvedSection, bool) {
	if o == nil || IsNil(o.NotResolved) {
		return nil, false
	}
	return o.NotResolved, true
}

// HasNotResolved returns a boolean if a field has been set.
func (o *PopulationSource) HasNotResolved() bool {
	if o != nil && !IsNil(o.NotResolved) {
		return true
	}

	return false
}

// SetNotResolved gets a reference to the given PopulationSourceNotResolvedSection and assigns it to the NotResolved field.
func (o *PopulationSource) SetNotResolved(v PopulationSourceNotResolvedSection) {
	o.NotResolved = &v
}

// GetPrivate returns the Private field value
func (o *PopulationSource) GetPrivate() PopulationSourcePrivateSection {
	if o == nil {
		var ret PopulationSourcePrivateSection
		return ret
	}

	return o.Private
}

// GetPrivateOk returns a tuple with the Private field value
// and a boolean to check if the value has been set.
func (o *PopulationSource) GetPrivateOk() (*PopulationSourcePrivateSection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Private, true
}

// SetPrivate sets field value
func (o *PopulationSource) SetPrivate(v PopulationSourcePrivateSection) {
	o.Private = v
}

// GetBusiness returns the Business field value
func (o *PopulationSource) GetBusiness() PopulationSourceBusinessSection {
	if o == nil {
		var ret PopulationSourceBusinessSection
		return ret
	}

	return o.Business
}

// GetBusinessOk returns a tuple with the Business field value
// and a boolean to check if the value has been set.
func (o *PopulationSource) GetBusinessOk() (*PopulationSourceBusinessSection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Business, true
}

// SetBusiness sets field value
func (o *PopulationSource) SetBusiness(v PopulationSourceBusinessSection) {
	o.Business = v
}

func (o PopulationSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PopulationSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["source"] = o.Source
	toSerialize["meta"] = o.Meta
	if !IsNil(o.NotResolved) {
		toSerialize["not_resolved"] = o.NotResolved
	}
	toSerialize["private"] = o.Private
	toSerialize["business"] = o.Business
	return toSerialize, nil
}

func (o *PopulationSource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"source",
		"meta",
		"private",
		"business",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPopulationSource := _PopulationSource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPopulationSource)

	if err != nil {
		return err
	}

	*o = PopulationSource(varPopulationSource)

	return err
}

type NullablePopulationSource struct {
	value *PopulationSource
	isSet bool
}

func (v NullablePopulationSource) Get() *PopulationSource {
	return v.value
}

func (v *NullablePopulationSource) Set(val *PopulationSource) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulationSource) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulationSource(val *PopulationSource) *NullablePopulationSource {
	return &NullablePopulationSource{value: val, isSet: true}
}

func (v NullablePopulationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


