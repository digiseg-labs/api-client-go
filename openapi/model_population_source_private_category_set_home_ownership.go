/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the PopulationSourcePrivateCategorySetHomeOwnership type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PopulationSourcePrivateCategorySetHomeOwnership{}

// PopulationSourcePrivateCategorySetHomeOwnership struct for PopulationSourcePrivateCategorySetHomeOwnership
type PopulationSourcePrivateCategorySetHomeOwnership struct {
	J1 int32 `json:"j1"`
	J2 int32 `json:"j2"`
	AdditionalProperties map[string]interface{}
}

type _PopulationSourcePrivateCategorySetHomeOwnership PopulationSourcePrivateCategorySetHomeOwnership

// NewPopulationSourcePrivateCategorySetHomeOwnership instantiates a new PopulationSourcePrivateCategorySetHomeOwnership object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulationSourcePrivateCategorySetHomeOwnership(j1 int32, j2 int32) *PopulationSourcePrivateCategorySetHomeOwnership {
	this := PopulationSourcePrivateCategorySetHomeOwnership{}
	this.J1 = j1
	this.J2 = j2
	return &this
}

// NewPopulationSourcePrivateCategorySetHomeOwnershipWithDefaults instantiates a new PopulationSourcePrivateCategorySetHomeOwnership object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationSourcePrivateCategorySetHomeOwnershipWithDefaults() *PopulationSourcePrivateCategorySetHomeOwnership {
	this := PopulationSourcePrivateCategorySetHomeOwnership{}
	return &this
}

// GetJ1 returns the J1 field value
func (o *PopulationSourcePrivateCategorySetHomeOwnership) GetJ1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.J1
}

// GetJ1Ok returns a tuple with the J1 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetHomeOwnership) GetJ1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.J1, true
}

// SetJ1 sets field value
func (o *PopulationSourcePrivateCategorySetHomeOwnership) SetJ1(v int32) {
	o.J1 = v
}

// GetJ2 returns the J2 field value
func (o *PopulationSourcePrivateCategorySetHomeOwnership) GetJ2() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.J2
}

// GetJ2Ok returns a tuple with the J2 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetHomeOwnership) GetJ2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.J2, true
}

// SetJ2 sets field value
func (o *PopulationSourcePrivateCategorySetHomeOwnership) SetJ2(v int32) {
	o.J2 = v
}

func (o PopulationSourcePrivateCategorySetHomeOwnership) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PopulationSourcePrivateCategorySetHomeOwnership) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["j1"] = o.J1
	toSerialize["j2"] = o.J2

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PopulationSourcePrivateCategorySetHomeOwnership) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"j1",
		"j2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPopulationSourcePrivateCategorySetHomeOwnership := _PopulationSourcePrivateCategorySetHomeOwnership{}

	err = json.Unmarshal(data, &varPopulationSourcePrivateCategorySetHomeOwnership)

	if err != nil {
		return err
	}

	*o = PopulationSourcePrivateCategorySetHomeOwnership(varPopulationSourcePrivateCategorySetHomeOwnership)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "j1")
		delete(additionalProperties, "j2")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePopulationSourcePrivateCategorySetHomeOwnership struct {
	value *PopulationSourcePrivateCategorySetHomeOwnership
	isSet bool
}

func (v NullablePopulationSourcePrivateCategorySetHomeOwnership) Get() *PopulationSourcePrivateCategorySetHomeOwnership {
	return v.value
}

func (v *NullablePopulationSourcePrivateCategorySetHomeOwnership) Set(val *PopulationSourcePrivateCategorySetHomeOwnership) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulationSourcePrivateCategorySetHomeOwnership) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulationSourcePrivateCategorySetHomeOwnership) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulationSourcePrivateCategorySetHomeOwnership(val *PopulationSourcePrivateCategorySetHomeOwnership) *NullablePopulationSourcePrivateCategorySetHomeOwnership {
	return &NullablePopulationSourcePrivateCategorySetHomeOwnership{value: val, isSet: true}
}

func (v NullablePopulationSourcePrivateCategorySetHomeOwnership) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulationSourcePrivateCategorySetHomeOwnership) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


