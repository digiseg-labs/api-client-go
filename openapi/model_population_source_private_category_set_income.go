/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PopulationSourcePrivateCategorySetIncome type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PopulationSourcePrivateCategorySetIncome{}

// PopulationSourcePrivateCategorySetIncome struct for PopulationSourcePrivateCategorySetIncome
type PopulationSourcePrivateCategorySetIncome struct {
	H1 int32 `json:"h1"`
	H2 int32 `json:"h2"`
	H3 int32 `json:"h3"`
	H4 int32 `json:"h4"`
	H5 int32 `json:"h5"`
}

type _PopulationSourcePrivateCategorySetIncome PopulationSourcePrivateCategorySetIncome

// NewPopulationSourcePrivateCategorySetIncome instantiates a new PopulationSourcePrivateCategorySetIncome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulationSourcePrivateCategorySetIncome(h1 int32, h2 int32, h3 int32, h4 int32, h5 int32) *PopulationSourcePrivateCategorySetIncome {
	this := PopulationSourcePrivateCategorySetIncome{}
	this.H1 = h1
	this.H2 = h2
	this.H3 = h3
	this.H4 = h4
	this.H5 = h5
	return &this
}

// NewPopulationSourcePrivateCategorySetIncomeWithDefaults instantiates a new PopulationSourcePrivateCategorySetIncome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationSourcePrivateCategorySetIncomeWithDefaults() *PopulationSourcePrivateCategorySetIncome {
	this := PopulationSourcePrivateCategorySetIncome{}
	return &this
}

// GetH1 returns the H1 field value
func (o *PopulationSourcePrivateCategorySetIncome) GetH1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.H1
}

// GetH1Ok returns a tuple with the H1 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetIncome) GetH1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.H1, true
}

// SetH1 sets field value
func (o *PopulationSourcePrivateCategorySetIncome) SetH1(v int32) {
	o.H1 = v
}

// GetH2 returns the H2 field value
func (o *PopulationSourcePrivateCategorySetIncome) GetH2() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.H2
}

// GetH2Ok returns a tuple with the H2 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetIncome) GetH2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.H2, true
}

// SetH2 sets field value
func (o *PopulationSourcePrivateCategorySetIncome) SetH2(v int32) {
	o.H2 = v
}

// GetH3 returns the H3 field value
func (o *PopulationSourcePrivateCategorySetIncome) GetH3() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.H3
}

// GetH3Ok returns a tuple with the H3 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetIncome) GetH3Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.H3, true
}

// SetH3 sets field value
func (o *PopulationSourcePrivateCategorySetIncome) SetH3(v int32) {
	o.H3 = v
}

// GetH4 returns the H4 field value
func (o *PopulationSourcePrivateCategorySetIncome) GetH4() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.H4
}

// GetH4Ok returns a tuple with the H4 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetIncome) GetH4Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.H4, true
}

// SetH4 sets field value
func (o *PopulationSourcePrivateCategorySetIncome) SetH4(v int32) {
	o.H4 = v
}

// GetH5 returns the H5 field value
func (o *PopulationSourcePrivateCategorySetIncome) GetH5() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.H5
}

// GetH5Ok returns a tuple with the H5 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetIncome) GetH5Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.H5, true
}

// SetH5 sets field value
func (o *PopulationSourcePrivateCategorySetIncome) SetH5(v int32) {
	o.H5 = v
}

func (o PopulationSourcePrivateCategorySetIncome) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PopulationSourcePrivateCategorySetIncome) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["h1"] = o.H1
	toSerialize["h2"] = o.H2
	toSerialize["h3"] = o.H3
	toSerialize["h4"] = o.H4
	toSerialize["h5"] = o.H5
	return toSerialize, nil
}

func (o *PopulationSourcePrivateCategorySetIncome) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"h1",
		"h2",
		"h3",
		"h4",
		"h5",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPopulationSourcePrivateCategorySetIncome := _PopulationSourcePrivateCategorySetIncome{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPopulationSourcePrivateCategorySetIncome)

	if err != nil {
		return err
	}

	*o = PopulationSourcePrivateCategorySetIncome(varPopulationSourcePrivateCategorySetIncome)

	return err
}

type NullablePopulationSourcePrivateCategorySetIncome struct {
	value *PopulationSourcePrivateCategorySetIncome
	isSet bool
}

func (v NullablePopulationSourcePrivateCategorySetIncome) Get() *PopulationSourcePrivateCategorySetIncome {
	return v.value
}

func (v *NullablePopulationSourcePrivateCategorySetIncome) Set(val *PopulationSourcePrivateCategorySetIncome) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulationSourcePrivateCategorySetIncome) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulationSourcePrivateCategorySetIncome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulationSourcePrivateCategorySetIncome(val *PopulationSourcePrivateCategorySetIncome) *NullablePopulationSourcePrivateCategorySetIncome {
	return &NullablePopulationSourcePrivateCategorySetIncome{value: val, isSet: true}
}

func (v NullablePopulationSourcePrivateCategorySetIncome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulationSourcePrivateCategorySetIncome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


