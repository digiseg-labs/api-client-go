/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PopulationSourcePrivateCategorySetLivingSpace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PopulationSourcePrivateCategorySetLivingSpace{}

// PopulationSourcePrivateCategorySetLivingSpace struct for PopulationSourcePrivateCategorySetLivingSpace
type PopulationSourcePrivateCategorySetLivingSpace struct {
	L1 int32 `json:"l1"`
	L2 int32 `json:"l2"`
	L3 int32 `json:"l3"`
}

type _PopulationSourcePrivateCategorySetLivingSpace PopulationSourcePrivateCategorySetLivingSpace

// NewPopulationSourcePrivateCategorySetLivingSpace instantiates a new PopulationSourcePrivateCategorySetLivingSpace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopulationSourcePrivateCategorySetLivingSpace(l1 int32, l2 int32, l3 int32) *PopulationSourcePrivateCategorySetLivingSpace {
	this := PopulationSourcePrivateCategorySetLivingSpace{}
	this.L1 = l1
	this.L2 = l2
	this.L3 = l3
	return &this
}

// NewPopulationSourcePrivateCategorySetLivingSpaceWithDefaults instantiates a new PopulationSourcePrivateCategorySetLivingSpace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopulationSourcePrivateCategorySetLivingSpaceWithDefaults() *PopulationSourcePrivateCategorySetLivingSpace {
	this := PopulationSourcePrivateCategorySetLivingSpace{}
	return &this
}

// GetL1 returns the L1 field value
func (o *PopulationSourcePrivateCategorySetLivingSpace) GetL1() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.L1
}

// GetL1Ok returns a tuple with the L1 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetLivingSpace) GetL1Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.L1, true
}

// SetL1 sets field value
func (o *PopulationSourcePrivateCategorySetLivingSpace) SetL1(v int32) {
	o.L1 = v
}

// GetL2 returns the L2 field value
func (o *PopulationSourcePrivateCategorySetLivingSpace) GetL2() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.L2
}

// GetL2Ok returns a tuple with the L2 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetLivingSpace) GetL2Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.L2, true
}

// SetL2 sets field value
func (o *PopulationSourcePrivateCategorySetLivingSpace) SetL2(v int32) {
	o.L2 = v
}

// GetL3 returns the L3 field value
func (o *PopulationSourcePrivateCategorySetLivingSpace) GetL3() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.L3
}

// GetL3Ok returns a tuple with the L3 field value
// and a boolean to check if the value has been set.
func (o *PopulationSourcePrivateCategorySetLivingSpace) GetL3Ok() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.L3, true
}

// SetL3 sets field value
func (o *PopulationSourcePrivateCategorySetLivingSpace) SetL3(v int32) {
	o.L3 = v
}

func (o PopulationSourcePrivateCategorySetLivingSpace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PopulationSourcePrivateCategorySetLivingSpace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["l1"] = o.L1
	toSerialize["l2"] = o.L2
	toSerialize["l3"] = o.L3
	return toSerialize, nil
}

func (o *PopulationSourcePrivateCategorySetLivingSpace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"l1",
		"l2",
		"l3",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPopulationSourcePrivateCategorySetLivingSpace := _PopulationSourcePrivateCategorySetLivingSpace{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPopulationSourcePrivateCategorySetLivingSpace)

	if err != nil {
		return err
	}

	*o = PopulationSourcePrivateCategorySetLivingSpace(varPopulationSourcePrivateCategorySetLivingSpace)

	return err
}

type NullablePopulationSourcePrivateCategorySetLivingSpace struct {
	value *PopulationSourcePrivateCategorySetLivingSpace
	isSet bool
}

func (v NullablePopulationSourcePrivateCategorySetLivingSpace) Get() *PopulationSourcePrivateCategorySetLivingSpace {
	return v.value
}

func (v *NullablePopulationSourcePrivateCategorySetLivingSpace) Set(val *PopulationSourcePrivateCategorySetLivingSpace) {
	v.value = val
	v.isSet = true
}

func (v NullablePopulationSourcePrivateCategorySetLivingSpace) IsSet() bool {
	return v.isSet
}

func (v *NullablePopulationSourcePrivateCategorySetLivingSpace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopulationSourcePrivateCategorySetLivingSpace(val *PopulationSourcePrivateCategorySetLivingSpace) *NullablePopulationSourcePrivateCategorySetLivingSpace {
	return &NullablePopulationSourcePrivateCategorySetLivingSpace{value: val, isSet: true}
}

func (v NullablePopulationSourcePrivateCategorySetLivingSpace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopulationSourcePrivateCategorySetLivingSpace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


