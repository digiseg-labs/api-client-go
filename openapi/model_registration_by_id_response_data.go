/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young singles and couples | |  |  | c2 | Young couples with children | |  |  | c3 | Families with school children | |  |  | c4 | Older families | |  |  | c5 | Pensioners | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Up to 80 m² | |  |  | l2 | 80-119 m² | |  |  | l3 | Above 120 m² | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RegistrationByIdResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegistrationByIdResponseData{}

// RegistrationByIdResponseData struct for RegistrationByIdResponseData
type RegistrationByIdResponseData struct {
	// The ID of the registration
	Id *string `json:"id,omitempty"`
	Request *RegistrationRequest `json:"request,omitempty"`
	// Date and time of the registration expiry
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// Date and time of the verification, if verified
	VerifiedAt *time.Time `json:"verified_at,omitempty"`
	// The code needed to verify this registration
	VerificationCode *string `json:"verification_code,omitempty"`
}

// NewRegistrationByIdResponseData instantiates a new RegistrationByIdResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegistrationByIdResponseData() *RegistrationByIdResponseData {
	this := RegistrationByIdResponseData{}
	return &this
}

// NewRegistrationByIdResponseDataWithDefaults instantiates a new RegistrationByIdResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegistrationByIdResponseDataWithDefaults() *RegistrationByIdResponseData {
	this := RegistrationByIdResponseData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RegistrationByIdResponseData) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationByIdResponseData) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RegistrationByIdResponseData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RegistrationByIdResponseData) SetId(v string) {
	o.Id = &v
}

// GetRequest returns the Request field value if set, zero value otherwise.
func (o *RegistrationByIdResponseData) GetRequest() RegistrationRequest {
	if o == nil || IsNil(o.Request) {
		var ret RegistrationRequest
		return ret
	}
	return *o.Request
}

// GetRequestOk returns a tuple with the Request field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationByIdResponseData) GetRequestOk() (*RegistrationRequest, bool) {
	if o == nil || IsNil(o.Request) {
		return nil, false
	}
	return o.Request, true
}

// HasRequest returns a boolean if a field has been set.
func (o *RegistrationByIdResponseData) HasRequest() bool {
	if o != nil && !IsNil(o.Request) {
		return true
	}

	return false
}

// SetRequest gets a reference to the given RegistrationRequest and assigns it to the Request field.
func (o *RegistrationByIdResponseData) SetRequest(v RegistrationRequest) {
	o.Request = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *RegistrationByIdResponseData) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationByIdResponseData) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *RegistrationByIdResponseData) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *RegistrationByIdResponseData) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetVerifiedAt returns the VerifiedAt field value if set, zero value otherwise.
func (o *RegistrationByIdResponseData) GetVerifiedAt() time.Time {
	if o == nil || IsNil(o.VerifiedAt) {
		var ret time.Time
		return ret
	}
	return *o.VerifiedAt
}

// GetVerifiedAtOk returns a tuple with the VerifiedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationByIdResponseData) GetVerifiedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.VerifiedAt) {
		return nil, false
	}
	return o.VerifiedAt, true
}

// HasVerifiedAt returns a boolean if a field has been set.
func (o *RegistrationByIdResponseData) HasVerifiedAt() bool {
	if o != nil && !IsNil(o.VerifiedAt) {
		return true
	}

	return false
}

// SetVerifiedAt gets a reference to the given time.Time and assigns it to the VerifiedAt field.
func (o *RegistrationByIdResponseData) SetVerifiedAt(v time.Time) {
	o.VerifiedAt = &v
}

// GetVerificationCode returns the VerificationCode field value if set, zero value otherwise.
func (o *RegistrationByIdResponseData) GetVerificationCode() string {
	if o == nil || IsNil(o.VerificationCode) {
		var ret string
		return ret
	}
	return *o.VerificationCode
}

// GetVerificationCodeOk returns a tuple with the VerificationCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegistrationByIdResponseData) GetVerificationCodeOk() (*string, bool) {
	if o == nil || IsNil(o.VerificationCode) {
		return nil, false
	}
	return o.VerificationCode, true
}

// HasVerificationCode returns a boolean if a field has been set.
func (o *RegistrationByIdResponseData) HasVerificationCode() bool {
	if o != nil && !IsNil(o.VerificationCode) {
		return true
	}

	return false
}

// SetVerificationCode gets a reference to the given string and assigns it to the VerificationCode field.
func (o *RegistrationByIdResponseData) SetVerificationCode(v string) {
	o.VerificationCode = &v
}

func (o RegistrationByIdResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegistrationByIdResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Request) {
		toSerialize["request"] = o.Request
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.VerifiedAt) {
		toSerialize["verified_at"] = o.VerifiedAt
	}
	if !IsNil(o.VerificationCode) {
		toSerialize["verification_code"] = o.VerificationCode
	}
	return toSerialize, nil
}

type NullableRegistrationByIdResponseData struct {
	value *RegistrationByIdResponseData
	isSet bool
}

func (v NullableRegistrationByIdResponseData) Get() *RegistrationByIdResponseData {
	return v.value
}

func (v *NullableRegistrationByIdResponseData) Set(val *RegistrationByIdResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableRegistrationByIdResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableRegistrationByIdResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegistrationByIdResponseData(val *RegistrationByIdResponseData) *NullableRegistrationByIdResponseData {
	return &NullableRegistrationByIdResponseData{value: val, isSet: true}
}

func (v NullableRegistrationByIdResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegistrationByIdResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


