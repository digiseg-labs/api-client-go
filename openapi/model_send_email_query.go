/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SendEmailQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendEmailQuery{}

// SendEmailQuery struct for SendEmailQuery
type SendEmailQuery struct {
	// The ID of the email template to use.
	TemplateId string `json:"template_id"`
	// Model data to pass to the email template. Note that the following model data fields will be automatically populated by the service:  * `user_id`: The ID of the recipient user  * `user_name`: The name of the recipient user  * `user_email`: The email of the recipient user  * `account_id`: The ID of the recipient user's account  * `account_name`: The name of the recipient user's account 
	ModelData *map[string]string `json:"model_data,omitempty"`
	IncludeUsers SendEmailUserFilters `json:"include_users"`
	AdditionalProperties map[string]interface{}
}

type _SendEmailQuery SendEmailQuery

// NewSendEmailQuery instantiates a new SendEmailQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEmailQuery(templateId string, includeUsers SendEmailUserFilters) *SendEmailQuery {
	this := SendEmailQuery{}
	this.TemplateId = templateId
	this.IncludeUsers = includeUsers
	return &this
}

// NewSendEmailQueryWithDefaults instantiates a new SendEmailQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEmailQueryWithDefaults() *SendEmailQuery {
	this := SendEmailQuery{}
	return &this
}

// GetTemplateId returns the TemplateId field value
func (o *SendEmailQuery) GetTemplateId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value
// and a boolean to check if the value has been set.
func (o *SendEmailQuery) GetTemplateIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TemplateId, true
}

// SetTemplateId sets field value
func (o *SendEmailQuery) SetTemplateId(v string) {
	o.TemplateId = v
}

// GetModelData returns the ModelData field value if set, zero value otherwise.
func (o *SendEmailQuery) GetModelData() map[string]string {
	if o == nil || IsNil(o.ModelData) {
		var ret map[string]string
		return ret
	}
	return *o.ModelData
}

// GetModelDataOk returns a tuple with the ModelData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailQuery) GetModelDataOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.ModelData) {
		return nil, false
	}
	return o.ModelData, true
}

// HasModelData returns a boolean if a field has been set.
func (o *SendEmailQuery) HasModelData() bool {
	if o != nil && !IsNil(o.ModelData) {
		return true
	}

	return false
}

// SetModelData gets a reference to the given map[string]string and assigns it to the ModelData field.
func (o *SendEmailQuery) SetModelData(v map[string]string) {
	o.ModelData = &v
}

// GetIncludeUsers returns the IncludeUsers field value
func (o *SendEmailQuery) GetIncludeUsers() SendEmailUserFilters {
	if o == nil {
		var ret SendEmailUserFilters
		return ret
	}

	return o.IncludeUsers
}

// GetIncludeUsersOk returns a tuple with the IncludeUsers field value
// and a boolean to check if the value has been set.
func (o *SendEmailQuery) GetIncludeUsersOk() (*SendEmailUserFilters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeUsers, true
}

// SetIncludeUsers sets field value
func (o *SendEmailQuery) SetIncludeUsers(v SendEmailUserFilters) {
	o.IncludeUsers = v
}

func (o SendEmailQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendEmailQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["template_id"] = o.TemplateId
	if !IsNil(o.ModelData) {
		toSerialize["model_data"] = o.ModelData
	}
	toSerialize["include_users"] = o.IncludeUsers

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SendEmailQuery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"template_id",
		"include_users",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendEmailQuery := _SendEmailQuery{}

	err = json.Unmarshal(data, &varSendEmailQuery)

	if err != nil {
		return err
	}

	*o = SendEmailQuery(varSendEmailQuery)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "template_id")
		delete(additionalProperties, "model_data")
		delete(additionalProperties, "include_users")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSendEmailQuery struct {
	value *SendEmailQuery
	isSet bool
}

func (v NullableSendEmailQuery) Get() *SendEmailQuery {
	return v.value
}

func (v *NullableSendEmailQuery) Set(val *SendEmailQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEmailQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEmailQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEmailQuery(val *SendEmailQuery) *NullableSendEmailQuery {
	return &NullableSendEmailQuery{value: val, isSet: true}
}

func (v NullableSendEmailQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEmailQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


