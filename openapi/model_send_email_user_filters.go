/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SendEmailUserFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendEmailUserFilters{}

// SendEmailUserFilters Queries users to be recipients for an email. Depending on the `query_type`, other properties must be set as follows:   * If `single_user` is selected, `user_id` must be provided.   * If `users_filter` is selected, at least one of the `users_filter_*` properties should be provided.     They map directly to the filter properties on the `/users` endpoint.   * If `everyone` is selected, ALL users in the platform is emailed. Use with caution. 
type SendEmailUserFilters struct {
	QueryType string `json:"query_type"`
	UserId *string `json:"user_id,omitempty"`
	FilterAccountId *string `json:"filter_account_id,omitempty"`
	FilterPlatformRole *UserPlatformRole `json:"filter_platform_role,omitempty"`
	FilterAccountRole *UserAccountRole `json:"filter_account_role,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SendEmailUserFilters SendEmailUserFilters

// NewSendEmailUserFilters instantiates a new SendEmailUserFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendEmailUserFilters(queryType string) *SendEmailUserFilters {
	this := SendEmailUserFilters{}
	this.QueryType = queryType
	return &this
}

// NewSendEmailUserFiltersWithDefaults instantiates a new SendEmailUserFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendEmailUserFiltersWithDefaults() *SendEmailUserFilters {
	this := SendEmailUserFilters{}
	return &this
}

// GetQueryType returns the QueryType field value
func (o *SendEmailUserFilters) GetQueryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryType
}

// GetQueryTypeOk returns a tuple with the QueryType field value
// and a boolean to check if the value has been set.
func (o *SendEmailUserFilters) GetQueryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QueryType, true
}

// SetQueryType sets field value
func (o *SendEmailUserFilters) SetQueryType(v string) {
	o.QueryType = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *SendEmailUserFilters) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailUserFilters) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *SendEmailUserFilters) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *SendEmailUserFilters) SetUserId(v string) {
	o.UserId = &v
}

// GetFilterAccountId returns the FilterAccountId field value if set, zero value otherwise.
func (o *SendEmailUserFilters) GetFilterAccountId() string {
	if o == nil || IsNil(o.FilterAccountId) {
		var ret string
		return ret
	}
	return *o.FilterAccountId
}

// GetFilterAccountIdOk returns a tuple with the FilterAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailUserFilters) GetFilterAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.FilterAccountId) {
		return nil, false
	}
	return o.FilterAccountId, true
}

// HasFilterAccountId returns a boolean if a field has been set.
func (o *SendEmailUserFilters) HasFilterAccountId() bool {
	if o != nil && !IsNil(o.FilterAccountId) {
		return true
	}

	return false
}

// SetFilterAccountId gets a reference to the given string and assigns it to the FilterAccountId field.
func (o *SendEmailUserFilters) SetFilterAccountId(v string) {
	o.FilterAccountId = &v
}

// GetFilterPlatformRole returns the FilterPlatformRole field value if set, zero value otherwise.
func (o *SendEmailUserFilters) GetFilterPlatformRole() UserPlatformRole {
	if o == nil || IsNil(o.FilterPlatformRole) {
		var ret UserPlatformRole
		return ret
	}
	return *o.FilterPlatformRole
}

// GetFilterPlatformRoleOk returns a tuple with the FilterPlatformRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailUserFilters) GetFilterPlatformRoleOk() (*UserPlatformRole, bool) {
	if o == nil || IsNil(o.FilterPlatformRole) {
		return nil, false
	}
	return o.FilterPlatformRole, true
}

// HasFilterPlatformRole returns a boolean if a field has been set.
func (o *SendEmailUserFilters) HasFilterPlatformRole() bool {
	if o != nil && !IsNil(o.FilterPlatformRole) {
		return true
	}

	return false
}

// SetFilterPlatformRole gets a reference to the given UserPlatformRole and assigns it to the FilterPlatformRole field.
func (o *SendEmailUserFilters) SetFilterPlatformRole(v UserPlatformRole) {
	o.FilterPlatformRole = &v
}

// GetFilterAccountRole returns the FilterAccountRole field value if set, zero value otherwise.
func (o *SendEmailUserFilters) GetFilterAccountRole() UserAccountRole {
	if o == nil || IsNil(o.FilterAccountRole) {
		var ret UserAccountRole
		return ret
	}
	return *o.FilterAccountRole
}

// GetFilterAccountRoleOk returns a tuple with the FilterAccountRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SendEmailUserFilters) GetFilterAccountRoleOk() (*UserAccountRole, bool) {
	if o == nil || IsNil(o.FilterAccountRole) {
		return nil, false
	}
	return o.FilterAccountRole, true
}

// HasFilterAccountRole returns a boolean if a field has been set.
func (o *SendEmailUserFilters) HasFilterAccountRole() bool {
	if o != nil && !IsNil(o.FilterAccountRole) {
		return true
	}

	return false
}

// SetFilterAccountRole gets a reference to the given UserAccountRole and assigns it to the FilterAccountRole field.
func (o *SendEmailUserFilters) SetFilterAccountRole(v UserAccountRole) {
	o.FilterAccountRole = &v
}

func (o SendEmailUserFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendEmailUserFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query_type"] = o.QueryType
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.FilterAccountId) {
		toSerialize["filter_account_id"] = o.FilterAccountId
	}
	if !IsNil(o.FilterPlatformRole) {
		toSerialize["filter_platform_role"] = o.FilterPlatformRole
	}
	if !IsNil(o.FilterAccountRole) {
		toSerialize["filter_account_role"] = o.FilterAccountRole
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SendEmailUserFilters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendEmailUserFilters := _SendEmailUserFilters{}

	err = json.Unmarshal(data, &varSendEmailUserFilters)

	if err != nil {
		return err
	}

	*o = SendEmailUserFilters(varSendEmailUserFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "query_type")
		delete(additionalProperties, "user_id")
		delete(additionalProperties, "filter_account_id")
		delete(additionalProperties, "filter_platform_role")
		delete(additionalProperties, "filter_account_role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSendEmailUserFilters struct {
	value *SendEmailUserFilters
	isSet bool
}

func (v NullableSendEmailUserFilters) Get() *SendEmailUserFilters {
	return v.value
}

func (v *NullableSendEmailUserFilters) Set(val *SendEmailUserFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEmailUserFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEmailUserFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEmailUserFilters(val *SendEmailUserFilters) *NullableSendEmailUserFilters {
	return &NullableSendEmailUserFilters{value: val, isSet: true}
}

func (v NullableSendEmailUserFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEmailUserFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


