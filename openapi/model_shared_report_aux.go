/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SharedReportAux type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedReportAux{}

// SharedReportAux struct for SharedReportAux
type SharedReportAux struct {
	// ID of the account that owns the study
	AccountId *string `json:"account_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SharedReportAux SharedReportAux

// NewSharedReportAux instantiates a new SharedReportAux object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedReportAux() *SharedReportAux {
	this := SharedReportAux{}
	return &this
}

// NewSharedReportAuxWithDefaults instantiates a new SharedReportAux object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedReportAuxWithDefaults() *SharedReportAux {
	this := SharedReportAux{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *SharedReportAux) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedReportAux) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *SharedReportAux) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *SharedReportAux) SetAccountId(v string) {
	o.AccountId = &v
}

func (o SharedReportAux) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedReportAux) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedReportAux) UnmarshalJSON(data []byte) (err error) {
	varSharedReportAux := _SharedReportAux{}

	err = json.Unmarshal(data, &varSharedReportAux)

	if err != nil {
		return err
	}

	*o = SharedReportAux(varSharedReportAux)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedReportAux struct {
	value *SharedReportAux
	isSet bool
}

func (v NullableSharedReportAux) Get() *SharedReportAux {
	return v.value
}

func (v *NullableSharedReportAux) Set(val *SharedReportAux) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedReportAux) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedReportAux) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedReportAux(val *SharedReportAux) *NullableSharedReportAux {
	return &NullableSharedReportAux{value: val, isSet: true}
}

func (v NullableSharedReportAux) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedReportAux) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


