/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SharedReportBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedReportBase{}

// SharedReportBase struct for SharedReportBase
type SharedReportBase struct {
	// URL of the publicly available asset
	AssetUrl *string `json:"asset_url,omitempty"`
	ReportType SharedReportType `json:"report_type"`
	// Optional date/time that the shared report will expire. Default is 28 days after the time of creation.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// ID of the study to which the report belongs
	StudyId *string `json:"study_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SharedReportBase SharedReportBase

// NewSharedReportBase instantiates a new SharedReportBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedReportBase(reportType SharedReportType) *SharedReportBase {
	this := SharedReportBase{}
	this.ReportType = reportType
	return &this
}

// NewSharedReportBaseWithDefaults instantiates a new SharedReportBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedReportBaseWithDefaults() *SharedReportBase {
	this := SharedReportBase{}
	return &this
}

// GetAssetUrl returns the AssetUrl field value if set, zero value otherwise.
func (o *SharedReportBase) GetAssetUrl() string {
	if o == nil || IsNil(o.AssetUrl) {
		var ret string
		return ret
	}
	return *o.AssetUrl
}

// GetAssetUrlOk returns a tuple with the AssetUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedReportBase) GetAssetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AssetUrl) {
		return nil, false
	}
	return o.AssetUrl, true
}

// HasAssetUrl returns a boolean if a field has been set.
func (o *SharedReportBase) HasAssetUrl() bool {
	if o != nil && !IsNil(o.AssetUrl) {
		return true
	}

	return false
}

// SetAssetUrl gets a reference to the given string and assigns it to the AssetUrl field.
func (o *SharedReportBase) SetAssetUrl(v string) {
	o.AssetUrl = &v
}

// GetReportType returns the ReportType field value
func (o *SharedReportBase) GetReportType() SharedReportType {
	if o == nil {
		var ret SharedReportType
		return ret
	}

	return o.ReportType
}

// GetReportTypeOk returns a tuple with the ReportType field value
// and a boolean to check if the value has been set.
func (o *SharedReportBase) GetReportTypeOk() (*SharedReportType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportType, true
}

// SetReportType sets field value
func (o *SharedReportBase) SetReportType(v SharedReportType) {
	o.ReportType = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *SharedReportBase) GetExpiresAt() time.Time {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedReportBase) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *SharedReportBase) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given time.Time and assigns it to the ExpiresAt field.
func (o *SharedReportBase) SetExpiresAt(v time.Time) {
	o.ExpiresAt = &v
}

// GetStudyId returns the StudyId field value if set, zero value otherwise.
func (o *SharedReportBase) GetStudyId() string {
	if o == nil || IsNil(o.StudyId) {
		var ret string
		return ret
	}
	return *o.StudyId
}

// GetStudyIdOk returns a tuple with the StudyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedReportBase) GetStudyIdOk() (*string, bool) {
	if o == nil || IsNil(o.StudyId) {
		return nil, false
	}
	return o.StudyId, true
}

// HasStudyId returns a boolean if a field has been set.
func (o *SharedReportBase) HasStudyId() bool {
	if o != nil && !IsNil(o.StudyId) {
		return true
	}

	return false
}

// SetStudyId gets a reference to the given string and assigns it to the StudyId field.
func (o *SharedReportBase) SetStudyId(v string) {
	o.StudyId = &v
}

func (o SharedReportBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedReportBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssetUrl) {
		toSerialize["asset_url"] = o.AssetUrl
	}
	toSerialize["report_type"] = o.ReportType
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.StudyId) {
		toSerialize["study_id"] = o.StudyId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedReportBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"report_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharedReportBase := _SharedReportBase{}

	err = json.Unmarshal(data, &varSharedReportBase)

	if err != nil {
		return err
	}

	*o = SharedReportBase(varSharedReportBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asset_url")
		delete(additionalProperties, "report_type")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "study_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedReportBase struct {
	value *SharedReportBase
	isSet bool
}

func (v NullableSharedReportBase) Get() *SharedReportBase {
	return v.value
}

func (v *NullableSharedReportBase) Set(val *SharedReportBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedReportBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedReportBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedReportBase(val *SharedReportBase) *NullableSharedReportBase {
	return &NullableSharedReportBase{value: val, isSet: true}
}

func (v NullableSharedReportBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedReportBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


