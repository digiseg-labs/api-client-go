/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StudyDeviceStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyDeviceStats{}

// StudyDeviceStats struct for StudyDeviceStats
type StudyDeviceStats struct {
	DeviceTypes []StudyDeviceTypeCategoryStats `json:"device_types"`
	AdditionalProperties map[string]interface{}
}

type _StudyDeviceStats StudyDeviceStats

// NewStudyDeviceStats instantiates a new StudyDeviceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyDeviceStats(deviceTypes []StudyDeviceTypeCategoryStats) *StudyDeviceStats {
	this := StudyDeviceStats{}
	this.DeviceTypes = deviceTypes
	return &this
}

// NewStudyDeviceStatsWithDefaults instantiates a new StudyDeviceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyDeviceStatsWithDefaults() *StudyDeviceStats {
	this := StudyDeviceStats{}
	return &this
}

// GetDeviceTypes returns the DeviceTypes field value
func (o *StudyDeviceStats) GetDeviceTypes() []StudyDeviceTypeCategoryStats {
	if o == nil {
		var ret []StudyDeviceTypeCategoryStats
		return ret
	}

	return o.DeviceTypes
}

// GetDeviceTypesOk returns a tuple with the DeviceTypes field value
// and a boolean to check if the value has been set.
func (o *StudyDeviceStats) GetDeviceTypesOk() ([]StudyDeviceTypeCategoryStats, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceTypes, true
}

// SetDeviceTypes sets field value
func (o *StudyDeviceStats) SetDeviceTypes(v []StudyDeviceTypeCategoryStats) {
	o.DeviceTypes = v
}

func (o StudyDeviceStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyDeviceStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["device_types"] = o.DeviceTypes

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyDeviceStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"device_types",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStudyDeviceStats := _StudyDeviceStats{}

	err = json.Unmarshal(data, &varStudyDeviceStats)

	if err != nil {
		return err
	}

	*o = StudyDeviceStats(varStudyDeviceStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device_types")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyDeviceStats struct {
	value *StudyDeviceStats
	isSet bool
}

func (v NullableStudyDeviceStats) Get() *StudyDeviceStats {
	return v.value
}

func (v *NullableStudyDeviceStats) Set(val *StudyDeviceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyDeviceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyDeviceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyDeviceStats(val *StudyDeviceStats) *NullableStudyDeviceStats {
	return &NullableStudyDeviceStats{value: val, isSet: true}
}

func (v NullableStudyDeviceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyDeviceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


