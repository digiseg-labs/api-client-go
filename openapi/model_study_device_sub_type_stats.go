/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StudyDeviceSubTypeStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyDeviceSubTypeStats{}

// StudyDeviceSubTypeStats struct for StudyDeviceSubTypeStats
type StudyDeviceSubTypeStats struct {
	Name string `json:"name"`
	// The total count of events recorded for the device.
	Count int32 `json:"count"`
	// The total count of impressions recorded for the device.
	Impressions *int32 `json:"impressions,omitempty"`
	// The total count of clicks recorded for the device.
	Clicks *int32 `json:"clicks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StudyDeviceSubTypeStats StudyDeviceSubTypeStats

// NewStudyDeviceSubTypeStats instantiates a new StudyDeviceSubTypeStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyDeviceSubTypeStats(name string, count int32) *StudyDeviceSubTypeStats {
	this := StudyDeviceSubTypeStats{}
	this.Name = name
	this.Count = count
	return &this
}

// NewStudyDeviceSubTypeStatsWithDefaults instantiates a new StudyDeviceSubTypeStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyDeviceSubTypeStatsWithDefaults() *StudyDeviceSubTypeStats {
	this := StudyDeviceSubTypeStats{}
	return &this
}

// GetName returns the Name field value
func (o *StudyDeviceSubTypeStats) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StudyDeviceSubTypeStats) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StudyDeviceSubTypeStats) SetName(v string) {
	o.Name = v
}

// GetCount returns the Count field value
func (o *StudyDeviceSubTypeStats) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *StudyDeviceSubTypeStats) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *StudyDeviceSubTypeStats) SetCount(v int32) {
	o.Count = v
}

// GetImpressions returns the Impressions field value if set, zero value otherwise.
func (o *StudyDeviceSubTypeStats) GetImpressions() int32 {
	if o == nil || IsNil(o.Impressions) {
		var ret int32
		return ret
	}
	return *o.Impressions
}

// GetImpressionsOk returns a tuple with the Impressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyDeviceSubTypeStats) GetImpressionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Impressions) {
		return nil, false
	}
	return o.Impressions, true
}

// HasImpressions returns a boolean if a field has been set.
func (o *StudyDeviceSubTypeStats) HasImpressions() bool {
	if o != nil && !IsNil(o.Impressions) {
		return true
	}

	return false
}

// SetImpressions gets a reference to the given int32 and assigns it to the Impressions field.
func (o *StudyDeviceSubTypeStats) SetImpressions(v int32) {
	o.Impressions = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *StudyDeviceSubTypeStats) GetClicks() int32 {
	if o == nil || IsNil(o.Clicks) {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyDeviceSubTypeStats) GetClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *StudyDeviceSubTypeStats) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *StudyDeviceSubTypeStats) SetClicks(v int32) {
	o.Clicks = &v
}

func (o StudyDeviceSubTypeStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyDeviceSubTypeStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["count"] = o.Count
	if !IsNil(o.Impressions) {
		toSerialize["impressions"] = o.Impressions
	}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyDeviceSubTypeStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStudyDeviceSubTypeStats := _StudyDeviceSubTypeStats{}

	err = json.Unmarshal(data, &varStudyDeviceSubTypeStats)

	if err != nil {
		return err
	}

	*o = StudyDeviceSubTypeStats(varStudyDeviceSubTypeStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "count")
		delete(additionalProperties, "impressions")
		delete(additionalProperties, "clicks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyDeviceSubTypeStats struct {
	value *StudyDeviceSubTypeStats
	isSet bool
}

func (v NullableStudyDeviceSubTypeStats) Get() *StudyDeviceSubTypeStats {
	return v.value
}

func (v *NullableStudyDeviceSubTypeStats) Set(val *StudyDeviceSubTypeStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyDeviceSubTypeStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyDeviceSubTypeStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyDeviceSubTypeStats(val *StudyDeviceSubTypeStats) *NullableStudyDeviceSubTypeStats {
	return &NullableStudyDeviceSubTypeStats{value: val, isSet: true}
}

func (v NullableStudyDeviceSubTypeStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyDeviceSubTypeStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


