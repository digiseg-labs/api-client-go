/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the StudyEventCreation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyEventCreation{}

// StudyEventCreation Defines the creation of one or more study events. If creating a single event, the `events` array is not needed. If creating a bulk of events, repeated attributes (for example event_type) can be entered once and reused across the `events` array. 
type StudyEventCreation struct {
	Events []StudyEventCreationBase `json:"events,omitempty"`
	IpAddress *string `json:"ip_address,omitempty"`
	// The user agent of the event
	UserAgent *string `json:"user_agent,omitempty"`
	// The referer value of the event
	Referer *string `json:"referer,omitempty"`
	// Optionally, the time of the event
	EventTime *time.Time `json:"event_time,omitempty"`
	// The event type to ingest, typically `impression` or `click`
	EventType *string `json:"event_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StudyEventCreation StudyEventCreation

// NewStudyEventCreation instantiates a new StudyEventCreation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyEventCreation() *StudyEventCreation {
	this := StudyEventCreation{}
	return &this
}

// NewStudyEventCreationWithDefaults instantiates a new StudyEventCreation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyEventCreationWithDefaults() *StudyEventCreation {
	this := StudyEventCreation{}
	return &this
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *StudyEventCreation) GetEvents() []StudyEventCreationBase {
	if o == nil || IsNil(o.Events) {
		var ret []StudyEventCreationBase
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyEventCreation) GetEventsOk() ([]StudyEventCreationBase, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *StudyEventCreation) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []StudyEventCreationBase and assigns it to the Events field.
func (o *StudyEventCreation) SetEvents(v []StudyEventCreationBase) {
	o.Events = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *StudyEventCreation) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyEventCreation) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *StudyEventCreation) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *StudyEventCreation) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetUserAgent returns the UserAgent field value if set, zero value otherwise.
func (o *StudyEventCreation) GetUserAgent() string {
	if o == nil || IsNil(o.UserAgent) {
		var ret string
		return ret
	}
	return *o.UserAgent
}

// GetUserAgentOk returns a tuple with the UserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyEventCreation) GetUserAgentOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgent) {
		return nil, false
	}
	return o.UserAgent, true
}

// HasUserAgent returns a boolean if a field has been set.
func (o *StudyEventCreation) HasUserAgent() bool {
	if o != nil && !IsNil(o.UserAgent) {
		return true
	}

	return false
}

// SetUserAgent gets a reference to the given string and assigns it to the UserAgent field.
func (o *StudyEventCreation) SetUserAgent(v string) {
	o.UserAgent = &v
}

// GetReferer returns the Referer field value if set, zero value otherwise.
func (o *StudyEventCreation) GetReferer() string {
	if o == nil || IsNil(o.Referer) {
		var ret string
		return ret
	}
	return *o.Referer
}

// GetRefererOk returns a tuple with the Referer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyEventCreation) GetRefererOk() (*string, bool) {
	if o == nil || IsNil(o.Referer) {
		return nil, false
	}
	return o.Referer, true
}

// HasReferer returns a boolean if a field has been set.
func (o *StudyEventCreation) HasReferer() bool {
	if o != nil && !IsNil(o.Referer) {
		return true
	}

	return false
}

// SetReferer gets a reference to the given string and assigns it to the Referer field.
func (o *StudyEventCreation) SetReferer(v string) {
	o.Referer = &v
}

// GetEventTime returns the EventTime field value if set, zero value otherwise.
func (o *StudyEventCreation) GetEventTime() time.Time {
	if o == nil || IsNil(o.EventTime) {
		var ret time.Time
		return ret
	}
	return *o.EventTime
}

// GetEventTimeOk returns a tuple with the EventTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyEventCreation) GetEventTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EventTime) {
		return nil, false
	}
	return o.EventTime, true
}

// HasEventTime returns a boolean if a field has been set.
func (o *StudyEventCreation) HasEventTime() bool {
	if o != nil && !IsNil(o.EventTime) {
		return true
	}

	return false
}

// SetEventTime gets a reference to the given time.Time and assigns it to the EventTime field.
func (o *StudyEventCreation) SetEventTime(v time.Time) {
	o.EventTime = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *StudyEventCreation) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyEventCreation) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *StudyEventCreation) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *StudyEventCreation) SetEventType(v string) {
	o.EventType = &v
}

func (o StudyEventCreation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyEventCreation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	if !IsNil(o.UserAgent) {
		toSerialize["user_agent"] = o.UserAgent
	}
	if !IsNil(o.Referer) {
		toSerialize["referer"] = o.Referer
	}
	if !IsNil(o.EventTime) {
		toSerialize["event_time"] = o.EventTime
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyEventCreation) UnmarshalJSON(data []byte) (err error) {
	varStudyEventCreation := _StudyEventCreation{}

	err = json.Unmarshal(data, &varStudyEventCreation)

	if err != nil {
		return err
	}

	*o = StudyEventCreation(varStudyEventCreation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "events")
		delete(additionalProperties, "ip_address")
		delete(additionalProperties, "user_agent")
		delete(additionalProperties, "referer")
		delete(additionalProperties, "event_time")
		delete(additionalProperties, "event_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyEventCreation struct {
	value *StudyEventCreation
	isSet bool
}

func (v NullableStudyEventCreation) Get() *StudyEventCreation {
	return v.value
}

func (v *NullableStudyEventCreation) Set(val *StudyEventCreation) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyEventCreation) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyEventCreation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyEventCreation(val *StudyEventCreation) *NullableStudyEventCreation {
	return &NullableStudyEventCreation{value: val, isSet: true}
}

func (v NullableStudyEventCreation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyEventCreation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


