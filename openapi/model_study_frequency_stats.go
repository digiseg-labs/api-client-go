/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StudyFrequencyStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyFrequencyStats{}

// StudyFrequencyStats struct for StudyFrequencyStats
type StudyFrequencyStats struct {
	// The event that is represented in this frequency stats. Current values include `all` (all events), `impression` or `click`
	EventType *string `json:"event_type,omitempty"`
	// Optionally an array of additional frequency stats for more fine-grained event types
	SubFrequencies []StudyFrequencyStats `json:"sub_frequencies,omitempty"`
	// The average frequency of events per user. 
	AverageFrequency *float32 `json:"average_frequency,omitempty"`
	// A listing of frequencies observed and the relevant measurements for each. The returned list may be truncated to cut off the \"long tail\" of frequency values. 
	Frequencies []FrequencyStats `json:"frequencies,omitempty"`
	// The number of users that have generated events at a frequency value greater than those represented in `frequencies`. 
	CountAboveCap *int32 `json:"count_above_cap,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StudyFrequencyStats StudyFrequencyStats

// NewStudyFrequencyStats instantiates a new StudyFrequencyStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyFrequencyStats() *StudyFrequencyStats {
	this := StudyFrequencyStats{}
	return &this
}

// NewStudyFrequencyStatsWithDefaults instantiates a new StudyFrequencyStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyFrequencyStatsWithDefaults() *StudyFrequencyStats {
	this := StudyFrequencyStats{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *StudyFrequencyStats) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyFrequencyStats) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *StudyFrequencyStats) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *StudyFrequencyStats) SetEventType(v string) {
	o.EventType = &v
}

// GetSubFrequencies returns the SubFrequencies field value if set, zero value otherwise.
func (o *StudyFrequencyStats) GetSubFrequencies() []StudyFrequencyStats {
	if o == nil || IsNil(o.SubFrequencies) {
		var ret []StudyFrequencyStats
		return ret
	}
	return o.SubFrequencies
}

// GetSubFrequenciesOk returns a tuple with the SubFrequencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyFrequencyStats) GetSubFrequenciesOk() ([]StudyFrequencyStats, bool) {
	if o == nil || IsNil(o.SubFrequencies) {
		return nil, false
	}
	return o.SubFrequencies, true
}

// HasSubFrequencies returns a boolean if a field has been set.
func (o *StudyFrequencyStats) HasSubFrequencies() bool {
	if o != nil && !IsNil(o.SubFrequencies) {
		return true
	}

	return false
}

// SetSubFrequencies gets a reference to the given []StudyFrequencyStats and assigns it to the SubFrequencies field.
func (o *StudyFrequencyStats) SetSubFrequencies(v []StudyFrequencyStats) {
	o.SubFrequencies = v
}

// GetAverageFrequency returns the AverageFrequency field value if set, zero value otherwise.
func (o *StudyFrequencyStats) GetAverageFrequency() float32 {
	if o == nil || IsNil(o.AverageFrequency) {
		var ret float32
		return ret
	}
	return *o.AverageFrequency
}

// GetAverageFrequencyOk returns a tuple with the AverageFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyFrequencyStats) GetAverageFrequencyOk() (*float32, bool) {
	if o == nil || IsNil(o.AverageFrequency) {
		return nil, false
	}
	return o.AverageFrequency, true
}

// HasAverageFrequency returns a boolean if a field has been set.
func (o *StudyFrequencyStats) HasAverageFrequency() bool {
	if o != nil && !IsNil(o.AverageFrequency) {
		return true
	}

	return false
}

// SetAverageFrequency gets a reference to the given float32 and assigns it to the AverageFrequency field.
func (o *StudyFrequencyStats) SetAverageFrequency(v float32) {
	o.AverageFrequency = &v
}

// GetFrequencies returns the Frequencies field value if set, zero value otherwise.
func (o *StudyFrequencyStats) GetFrequencies() []FrequencyStats {
	if o == nil || IsNil(o.Frequencies) {
		var ret []FrequencyStats
		return ret
	}
	return o.Frequencies
}

// GetFrequenciesOk returns a tuple with the Frequencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyFrequencyStats) GetFrequenciesOk() ([]FrequencyStats, bool) {
	if o == nil || IsNil(o.Frequencies) {
		return nil, false
	}
	return o.Frequencies, true
}

// HasFrequencies returns a boolean if a field has been set.
func (o *StudyFrequencyStats) HasFrequencies() bool {
	if o != nil && !IsNil(o.Frequencies) {
		return true
	}

	return false
}

// SetFrequencies gets a reference to the given []FrequencyStats and assigns it to the Frequencies field.
func (o *StudyFrequencyStats) SetFrequencies(v []FrequencyStats) {
	o.Frequencies = v
}

// GetCountAboveCap returns the CountAboveCap field value if set, zero value otherwise.
func (o *StudyFrequencyStats) GetCountAboveCap() int32 {
	if o == nil || IsNil(o.CountAboveCap) {
		var ret int32
		return ret
	}
	return *o.CountAboveCap
}

// GetCountAboveCapOk returns a tuple with the CountAboveCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyFrequencyStats) GetCountAboveCapOk() (*int32, bool) {
	if o == nil || IsNil(o.CountAboveCap) {
		return nil, false
	}
	return o.CountAboveCap, true
}

// HasCountAboveCap returns a boolean if a field has been set.
func (o *StudyFrequencyStats) HasCountAboveCap() bool {
	if o != nil && !IsNil(o.CountAboveCap) {
		return true
	}

	return false
}

// SetCountAboveCap gets a reference to the given int32 and assigns it to the CountAboveCap field.
func (o *StudyFrequencyStats) SetCountAboveCap(v int32) {
	o.CountAboveCap = &v
}

func (o StudyFrequencyStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyFrequencyStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.SubFrequencies) {
		toSerialize["sub_frequencies"] = o.SubFrequencies
	}
	if !IsNil(o.AverageFrequency) {
		toSerialize["average_frequency"] = o.AverageFrequency
	}
	if !IsNil(o.Frequencies) {
		toSerialize["frequencies"] = o.Frequencies
	}
	if !IsNil(o.CountAboveCap) {
		toSerialize["count_above_cap"] = o.CountAboveCap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyFrequencyStats) UnmarshalJSON(data []byte) (err error) {
	varStudyFrequencyStats := _StudyFrequencyStats{}

	err = json.Unmarshal(data, &varStudyFrequencyStats)

	if err != nil {
		return err
	}

	*o = StudyFrequencyStats(varStudyFrequencyStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "event_type")
		delete(additionalProperties, "sub_frequencies")
		delete(additionalProperties, "average_frequency")
		delete(additionalProperties, "frequencies")
		delete(additionalProperties, "count_above_cap")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyFrequencyStats struct {
	value *StudyFrequencyStats
	isSet bool
}

func (v NullableStudyFrequencyStats) Get() *StudyFrequencyStats {
	return v.value
}

func (v *NullableStudyFrequencyStats) Set(val *StudyFrequencyStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyFrequencyStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyFrequencyStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyFrequencyStats(val *StudyFrequencyStats) *NullableStudyFrequencyStats {
	return &NullableStudyFrequencyStats{value: val, isSet: true}
}

func (v NullableStudyFrequencyStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyFrequencyStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


