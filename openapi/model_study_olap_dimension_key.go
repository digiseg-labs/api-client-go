/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StudyOlapDimensionKey The dimensions that are queryable in the OLAP endpoint.  Notes about the values you can expect in these dimensions:  * The `record_type` is either `private`, `business` or `not_resolved` * Time-based values (`date` and `hour`) are UTC based * The `country` dimension returns 2-letter ISO country codes * The audience dimension values are audience codes such as `a1`, `b2` etc. * If a value is not present, an empty string will be returned 
type StudyOlapDimensionKey string

// List of StudyOlapDimensionKey
const (
	STUDYOLAPDIMENSIONKEY_RECORD_TYPE StudyOlapDimensionKey = "record_type"
	STUDYOLAPDIMENSIONKEY_REFERER_DOMAIN StudyOlapDimensionKey = "referer_domain"
	STUDYOLAPDIMENSIONKEY_REFERER_PATH StudyOlapDimensionKey = "referer_path"
	STUDYOLAPDIMENSIONKEY_DEVICE_TYPE StudyOlapDimensionKey = "device_type"
	STUDYOLAPDIMENSIONKEY_COUNTRY StudyOlapDimensionKey = "country"
	STUDYOLAPDIMENSIONKEY_TIME_ZONE StudyOlapDimensionKey = "time_zone"
	STUDYOLAPDIMENSIONKEY_DATE_UTC StudyOlapDimensionKey = "date_utc"
	STUDYOLAPDIMENSIONKEY_HOUR_UTC StudyOlapDimensionKey = "hour_utc"
	STUDYOLAPDIMENSIONKEY_DATE_LOCAL StudyOlapDimensionKey = "date_local"
	STUDYOLAPDIMENSIONKEY_HOUR_LOCAL StudyOlapDimensionKey = "hour_local"
	STUDYOLAPDIMENSIONKEY_HOME_TYPE StudyOlapDimensionKey = "home_type"
	STUDYOLAPDIMENSIONKEY_SAVINGS StudyOlapDimensionKey = "savings"
	STUDYOLAPDIMENSIONKEY_LIFECYCLE StudyOlapDimensionKey = "lifecycle"
	STUDYOLAPDIMENSIONKEY_CARS StudyOlapDimensionKey = "cars"
	STUDYOLAPDIMENSIONKEY_CHILDREN StudyOlapDimensionKey = "children"
	STUDYOLAPDIMENSIONKEY_EDUCATION StudyOlapDimensionKey = "education"
	STUDYOLAPDIMENSIONKEY_NEIGHBOURHOOD_TYPE StudyOlapDimensionKey = "neighbourhood_type"
	STUDYOLAPDIMENSIONKEY_INCOME StudyOlapDimensionKey = "income"
	STUDYOLAPDIMENSIONKEY_HOME_OWNERSHIP StudyOlapDimensionKey = "home_ownership"
	STUDYOLAPDIMENSIONKEY_BUILDING_AGE StudyOlapDimensionKey = "building_age"
	STUDYOLAPDIMENSIONKEY_LIVING_SPACE StudyOlapDimensionKey = "living_space"
	STUDYOLAPDIMENSIONKEY_TECH_LEVEL StudyOlapDimensionKey = "tech_level"
	STUDYOLAPDIMENSIONKEY_BUSINESS_SIZE StudyOlapDimensionKey = "business_size"
)

// All allowed values of StudyOlapDimensionKey enum
var AllowedStudyOlapDimensionKeyEnumValues = []StudyOlapDimensionKey{
	"record_type",
	"referer_domain",
	"referer_path",
	"device_type",
	"country",
	"time_zone",
	"date_utc",
	"hour_utc",
	"date_local",
	"hour_local",
	"home_type",
	"savings",
	"lifecycle",
	"cars",
	"children",
	"education",
	"neighbourhood_type",
	"income",
	"home_ownership",
	"building_age",
	"living_space",
	"tech_level",
	"business_size",
}

func (v *StudyOlapDimensionKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StudyOlapDimensionKey(value)
	for _, existing := range AllowedStudyOlapDimensionKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StudyOlapDimensionKey", value)
}

// NewStudyOlapDimensionKeyFromValue returns a pointer to a valid StudyOlapDimensionKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStudyOlapDimensionKeyFromValue(v string) (*StudyOlapDimensionKey, error) {
	ev := StudyOlapDimensionKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StudyOlapDimensionKey: valid values are %v", v, AllowedStudyOlapDimensionKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StudyOlapDimensionKey) IsValid() bool {
	for _, existing := range AllowedStudyOlapDimensionKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StudyOlapDimensionKey value
func (v StudyOlapDimensionKey) Ptr() *StudyOlapDimensionKey {
	return &v
}

type NullableStudyOlapDimensionKey struct {
	value *StudyOlapDimensionKey
	isSet bool
}

func (v NullableStudyOlapDimensionKey) Get() *StudyOlapDimensionKey {
	return v.value
}

func (v *NullableStudyOlapDimensionKey) Set(val *StudyOlapDimensionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyOlapDimensionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyOlapDimensionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyOlapDimensionKey(val *StudyOlapDimensionKey) *NullableStudyOlapDimensionKey {
	return &NullableStudyOlapDimensionKey{value: val, isSet: true}
}

func (v NullableStudyOlapDimensionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyOlapDimensionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

