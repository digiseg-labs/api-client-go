/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the StudyOlapQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyOlapQuery{}

// StudyOlapQuery struct for StudyOlapQuery
type StudyOlapQuery struct {
	// The from-date of the events to query
	FilterTimeFrom *time.Time `json:"filter_time_from,omitempty"`
	// The to-date of the events to query
	FilterTimeTo *time.Time `json:"filter_time_to,omitempty"`
	GroupBy []StudyOlapDimensionKey `json:"group_by,omitempty"`
	FilterDimensionsInclude []StudyOlapFilterItem `json:"filter_dimensions_include,omitempty"`
	FilterDimensionsExclude []StudyOlapFilterItem `json:"filter_dimensions_exclude,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StudyOlapQuery StudyOlapQuery

// NewStudyOlapQuery instantiates a new StudyOlapQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyOlapQuery() *StudyOlapQuery {
	this := StudyOlapQuery{}
	return &this
}

// NewStudyOlapQueryWithDefaults instantiates a new StudyOlapQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyOlapQueryWithDefaults() *StudyOlapQuery {
	this := StudyOlapQuery{}
	return &this
}

// GetFilterTimeFrom returns the FilterTimeFrom field value if set, zero value otherwise.
func (o *StudyOlapQuery) GetFilterTimeFrom() time.Time {
	if o == nil || IsNil(o.FilterTimeFrom) {
		var ret time.Time
		return ret
	}
	return *o.FilterTimeFrom
}

// GetFilterTimeFromOk returns a tuple with the FilterTimeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyOlapQuery) GetFilterTimeFromOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FilterTimeFrom) {
		return nil, false
	}
	return o.FilterTimeFrom, true
}

// HasFilterTimeFrom returns a boolean if a field has been set.
func (o *StudyOlapQuery) HasFilterTimeFrom() bool {
	if o != nil && !IsNil(o.FilterTimeFrom) {
		return true
	}

	return false
}

// SetFilterTimeFrom gets a reference to the given time.Time and assigns it to the FilterTimeFrom field.
func (o *StudyOlapQuery) SetFilterTimeFrom(v time.Time) {
	o.FilterTimeFrom = &v
}

// GetFilterTimeTo returns the FilterTimeTo field value if set, zero value otherwise.
func (o *StudyOlapQuery) GetFilterTimeTo() time.Time {
	if o == nil || IsNil(o.FilterTimeTo) {
		var ret time.Time
		return ret
	}
	return *o.FilterTimeTo
}

// GetFilterTimeToOk returns a tuple with the FilterTimeTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyOlapQuery) GetFilterTimeToOk() (*time.Time, bool) {
	if o == nil || IsNil(o.FilterTimeTo) {
		return nil, false
	}
	return o.FilterTimeTo, true
}

// HasFilterTimeTo returns a boolean if a field has been set.
func (o *StudyOlapQuery) HasFilterTimeTo() bool {
	if o != nil && !IsNil(o.FilterTimeTo) {
		return true
	}

	return false
}

// SetFilterTimeTo gets a reference to the given time.Time and assigns it to the FilterTimeTo field.
func (o *StudyOlapQuery) SetFilterTimeTo(v time.Time) {
	o.FilterTimeTo = &v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *StudyOlapQuery) GetGroupBy() []StudyOlapDimensionKey {
	if o == nil || IsNil(o.GroupBy) {
		var ret []StudyOlapDimensionKey
		return ret
	}
	return o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyOlapQuery) GetGroupByOk() ([]StudyOlapDimensionKey, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *StudyOlapQuery) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given []StudyOlapDimensionKey and assigns it to the GroupBy field.
func (o *StudyOlapQuery) SetGroupBy(v []StudyOlapDimensionKey) {
	o.GroupBy = v
}

// GetFilterDimensionsInclude returns the FilterDimensionsInclude field value if set, zero value otherwise.
func (o *StudyOlapQuery) GetFilterDimensionsInclude() []StudyOlapFilterItem {
	if o == nil || IsNil(o.FilterDimensionsInclude) {
		var ret []StudyOlapFilterItem
		return ret
	}
	return o.FilterDimensionsInclude
}

// GetFilterDimensionsIncludeOk returns a tuple with the FilterDimensionsInclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyOlapQuery) GetFilterDimensionsIncludeOk() ([]StudyOlapFilterItem, bool) {
	if o == nil || IsNil(o.FilterDimensionsInclude) {
		return nil, false
	}
	return o.FilterDimensionsInclude, true
}

// HasFilterDimensionsInclude returns a boolean if a field has been set.
func (o *StudyOlapQuery) HasFilterDimensionsInclude() bool {
	if o != nil && !IsNil(o.FilterDimensionsInclude) {
		return true
	}

	return false
}

// SetFilterDimensionsInclude gets a reference to the given []StudyOlapFilterItem and assigns it to the FilterDimensionsInclude field.
func (o *StudyOlapQuery) SetFilterDimensionsInclude(v []StudyOlapFilterItem) {
	o.FilterDimensionsInclude = v
}

// GetFilterDimensionsExclude returns the FilterDimensionsExclude field value if set, zero value otherwise.
func (o *StudyOlapQuery) GetFilterDimensionsExclude() []StudyOlapFilterItem {
	if o == nil || IsNil(o.FilterDimensionsExclude) {
		var ret []StudyOlapFilterItem
		return ret
	}
	return o.FilterDimensionsExclude
}

// GetFilterDimensionsExcludeOk returns a tuple with the FilterDimensionsExclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyOlapQuery) GetFilterDimensionsExcludeOk() ([]StudyOlapFilterItem, bool) {
	if o == nil || IsNil(o.FilterDimensionsExclude) {
		return nil, false
	}
	return o.FilterDimensionsExclude, true
}

// HasFilterDimensionsExclude returns a boolean if a field has been set.
func (o *StudyOlapQuery) HasFilterDimensionsExclude() bool {
	if o != nil && !IsNil(o.FilterDimensionsExclude) {
		return true
	}

	return false
}

// SetFilterDimensionsExclude gets a reference to the given []StudyOlapFilterItem and assigns it to the FilterDimensionsExclude field.
func (o *StudyOlapQuery) SetFilterDimensionsExclude(v []StudyOlapFilterItem) {
	o.FilterDimensionsExclude = v
}

func (o StudyOlapQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyOlapQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FilterTimeFrom) {
		toSerialize["filter_time_from"] = o.FilterTimeFrom
	}
	if !IsNil(o.FilterTimeTo) {
		toSerialize["filter_time_to"] = o.FilterTimeTo
	}
	if !IsNil(o.GroupBy) {
		toSerialize["group_by"] = o.GroupBy
	}
	if !IsNil(o.FilterDimensionsInclude) {
		toSerialize["filter_dimensions_include"] = o.FilterDimensionsInclude
	}
	if !IsNil(o.FilterDimensionsExclude) {
		toSerialize["filter_dimensions_exclude"] = o.FilterDimensionsExclude
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyOlapQuery) UnmarshalJSON(data []byte) (err error) {
	varStudyOlapQuery := _StudyOlapQuery{}

	err = json.Unmarshal(data, &varStudyOlapQuery)

	if err != nil {
		return err
	}

	*o = StudyOlapQuery(varStudyOlapQuery)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "filter_time_from")
		delete(additionalProperties, "filter_time_to")
		delete(additionalProperties, "group_by")
		delete(additionalProperties, "filter_dimensions_include")
		delete(additionalProperties, "filter_dimensions_exclude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyOlapQuery struct {
	value *StudyOlapQuery
	isSet bool
}

func (v NullableStudyOlapQuery) Get() *StudyOlapQuery {
	return v.value
}

func (v *NullableStudyOlapQuery) Set(val *StudyOlapQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyOlapQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyOlapQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyOlapQuery(val *StudyOlapQuery) *NullableStudyOlapQuery {
	return &NullableStudyOlapQuery{value: val, isSet: true}
}

func (v NullableStudyOlapQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyOlapQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


