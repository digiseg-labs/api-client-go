/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StudySummaryStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudySummaryStats{}

// StudySummaryStats struct for StudySummaryStats
type StudySummaryStats struct {
	Private MeasurementsContainer `json:"private"`
	Business MeasurementsContainer `json:"business"`
	NotResolved MeasurementsContainer `json:"not_resolved"`
	AdditionalProperties map[string]interface{}
}

type _StudySummaryStats StudySummaryStats

// NewStudySummaryStats instantiates a new StudySummaryStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudySummaryStats(private MeasurementsContainer, business MeasurementsContainer, notResolved MeasurementsContainer) *StudySummaryStats {
	this := StudySummaryStats{}
	this.Private = private
	this.Business = business
	this.NotResolved = notResolved
	return &this
}

// NewStudySummaryStatsWithDefaults instantiates a new StudySummaryStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudySummaryStatsWithDefaults() *StudySummaryStats {
	this := StudySummaryStats{}
	return &this
}

// GetPrivate returns the Private field value
func (o *StudySummaryStats) GetPrivate() MeasurementsContainer {
	if o == nil {
		var ret MeasurementsContainer
		return ret
	}

	return o.Private
}

// GetPrivateOk returns a tuple with the Private field value
// and a boolean to check if the value has been set.
func (o *StudySummaryStats) GetPrivateOk() (*MeasurementsContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Private, true
}

// SetPrivate sets field value
func (o *StudySummaryStats) SetPrivate(v MeasurementsContainer) {
	o.Private = v
}

// GetBusiness returns the Business field value
func (o *StudySummaryStats) GetBusiness() MeasurementsContainer {
	if o == nil {
		var ret MeasurementsContainer
		return ret
	}

	return o.Business
}

// GetBusinessOk returns a tuple with the Business field value
// and a boolean to check if the value has been set.
func (o *StudySummaryStats) GetBusinessOk() (*MeasurementsContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Business, true
}

// SetBusiness sets field value
func (o *StudySummaryStats) SetBusiness(v MeasurementsContainer) {
	o.Business = v
}

// GetNotResolved returns the NotResolved field value
func (o *StudySummaryStats) GetNotResolved() MeasurementsContainer {
	if o == nil {
		var ret MeasurementsContainer
		return ret
	}

	return o.NotResolved
}

// GetNotResolvedOk returns a tuple with the NotResolved field value
// and a boolean to check if the value has been set.
func (o *StudySummaryStats) GetNotResolvedOk() (*MeasurementsContainer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotResolved, true
}

// SetNotResolved sets field value
func (o *StudySummaryStats) SetNotResolved(v MeasurementsContainer) {
	o.NotResolved = v
}

func (o StudySummaryStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudySummaryStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["private"] = o.Private
	toSerialize["business"] = o.Business
	toSerialize["not_resolved"] = o.NotResolved

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudySummaryStats) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"private",
		"business",
		"not_resolved",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStudySummaryStats := _StudySummaryStats{}

	err = json.Unmarshal(data, &varStudySummaryStats)

	if err != nil {
		return err
	}

	*o = StudySummaryStats(varStudySummaryStats)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "private")
		delete(additionalProperties, "business")
		delete(additionalProperties, "not_resolved")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudySummaryStats struct {
	value *StudySummaryStats
	isSet bool
}

func (v NullableStudySummaryStats) Get() *StudySummaryStats {
	return v.value
}

func (v *NullableStudySummaryStats) Set(val *StudySummaryStats) {
	v.value = val
	v.isSet = true
}

func (v NullableStudySummaryStats) IsSet() bool {
	return v.isSet
}

func (v *NullableStudySummaryStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudySummaryStats(val *StudySummaryStats) *NullableStudySummaryStats {
	return &NullableStudySummaryStats{value: val, isSet: true}
}

func (v NullableStudySummaryStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudySummaryStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


