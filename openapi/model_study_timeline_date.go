/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the StudyTimelineDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyTimelineDate{}

// StudyTimelineDate Represents a UTC date of gathering timeline data for a study.
type StudyTimelineDate struct {
	Date string `json:"date"`
	Hours []StudyTimelineHour `json:"hours"`
	AdditionalProperties map[string]interface{}
}

type _StudyTimelineDate StudyTimelineDate

// NewStudyTimelineDate instantiates a new StudyTimelineDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyTimelineDate(date string, hours []StudyTimelineHour) *StudyTimelineDate {
	this := StudyTimelineDate{}
	this.Date = date
	this.Hours = hours
	return &this
}

// NewStudyTimelineDateWithDefaults instantiates a new StudyTimelineDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyTimelineDateWithDefaults() *StudyTimelineDate {
	this := StudyTimelineDate{}
	return &this
}

// GetDate returns the Date field value
func (o *StudyTimelineDate) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *StudyTimelineDate) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *StudyTimelineDate) SetDate(v string) {
	o.Date = v
}

// GetHours returns the Hours field value
func (o *StudyTimelineDate) GetHours() []StudyTimelineHour {
	if o == nil {
		var ret []StudyTimelineHour
		return ret
	}

	return o.Hours
}

// GetHoursOk returns a tuple with the Hours field value
// and a boolean to check if the value has been set.
func (o *StudyTimelineDate) GetHoursOk() ([]StudyTimelineHour, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hours, true
}

// SetHours sets field value
func (o *StudyTimelineDate) SetHours(v []StudyTimelineHour) {
	o.Hours = v
}

func (o StudyTimelineDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyTimelineDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["hours"] = o.Hours

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyTimelineDate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"hours",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStudyTimelineDate := _StudyTimelineDate{}

	err = json.Unmarshal(data, &varStudyTimelineDate)

	if err != nil {
		return err
	}

	*o = StudyTimelineDate(varStudyTimelineDate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "date")
		delete(additionalProperties, "hours")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyTimelineDate struct {
	value *StudyTimelineDate
	isSet bool
}

func (v NullableStudyTimelineDate) Get() *StudyTimelineDate {
	return v.value
}

func (v *NullableStudyTimelineDate) Set(val *StudyTimelineDate) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyTimelineDate) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyTimelineDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyTimelineDate(val *StudyTimelineDate) *NullableStudyTimelineDate {
	return &NullableStudyTimelineDate{value: val, isSet: true}
}

func (v NullableStudyTimelineDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyTimelineDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


