/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the StudyTimelineHour type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StudyTimelineHour{}

// StudyTimelineHour Represents a UTC hour of gathering timeline data for a study.
type StudyTimelineHour struct {
	// The hour of the day (from 0-23) in UTC time
	Hour *int32 `json:"hour,omitempty"`
	// The total count of events recorded in the hour.
	Count *int32 `json:"count,omitempty"`
	// The total count of impressions recorded in the hour.
	Impressions *int32 `json:"impressions,omitempty"`
	// The total count of clicks recorded in the hour.
	Clicks *int32 `json:"clicks,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StudyTimelineHour StudyTimelineHour

// NewStudyTimelineHour instantiates a new StudyTimelineHour object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStudyTimelineHour() *StudyTimelineHour {
	this := StudyTimelineHour{}
	return &this
}

// NewStudyTimelineHourWithDefaults instantiates a new StudyTimelineHour object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStudyTimelineHourWithDefaults() *StudyTimelineHour {
	this := StudyTimelineHour{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *StudyTimelineHour) GetHour() int32 {
	if o == nil || IsNil(o.Hour) {
		var ret int32
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyTimelineHour) GetHourOk() (*int32, bool) {
	if o == nil || IsNil(o.Hour) {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *StudyTimelineHour) HasHour() bool {
	if o != nil && !IsNil(o.Hour) {
		return true
	}

	return false
}

// SetHour gets a reference to the given int32 and assigns it to the Hour field.
func (o *StudyTimelineHour) SetHour(v int32) {
	o.Hour = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *StudyTimelineHour) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyTimelineHour) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *StudyTimelineHour) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *StudyTimelineHour) SetCount(v int32) {
	o.Count = &v
}

// GetImpressions returns the Impressions field value if set, zero value otherwise.
func (o *StudyTimelineHour) GetImpressions() int32 {
	if o == nil || IsNil(o.Impressions) {
		var ret int32
		return ret
	}
	return *o.Impressions
}

// GetImpressionsOk returns a tuple with the Impressions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyTimelineHour) GetImpressionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Impressions) {
		return nil, false
	}
	return o.Impressions, true
}

// HasImpressions returns a boolean if a field has been set.
func (o *StudyTimelineHour) HasImpressions() bool {
	if o != nil && !IsNil(o.Impressions) {
		return true
	}

	return false
}

// SetImpressions gets a reference to the given int32 and assigns it to the Impressions field.
func (o *StudyTimelineHour) SetImpressions(v int32) {
	o.Impressions = &v
}

// GetClicks returns the Clicks field value if set, zero value otherwise.
func (o *StudyTimelineHour) GetClicks() int32 {
	if o == nil || IsNil(o.Clicks) {
		var ret int32
		return ret
	}
	return *o.Clicks
}

// GetClicksOk returns a tuple with the Clicks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StudyTimelineHour) GetClicksOk() (*int32, bool) {
	if o == nil || IsNil(o.Clicks) {
		return nil, false
	}
	return o.Clicks, true
}

// HasClicks returns a boolean if a field has been set.
func (o *StudyTimelineHour) HasClicks() bool {
	if o != nil && !IsNil(o.Clicks) {
		return true
	}

	return false
}

// SetClicks gets a reference to the given int32 and assigns it to the Clicks field.
func (o *StudyTimelineHour) SetClicks(v int32) {
	o.Clicks = &v
}

func (o StudyTimelineHour) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StudyTimelineHour) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hour) {
		toSerialize["hour"] = o.Hour
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Impressions) {
		toSerialize["impressions"] = o.Impressions
	}
	if !IsNil(o.Clicks) {
		toSerialize["clicks"] = o.Clicks
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StudyTimelineHour) UnmarshalJSON(data []byte) (err error) {
	varStudyTimelineHour := _StudyTimelineHour{}

	err = json.Unmarshal(data, &varStudyTimelineHour)

	if err != nil {
		return err
	}

	*o = StudyTimelineHour(varStudyTimelineHour)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hour")
		delete(additionalProperties, "count")
		delete(additionalProperties, "impressions")
		delete(additionalProperties, "clicks")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStudyTimelineHour struct {
	value *StudyTimelineHour
	isSet bool
}

func (v NullableStudyTimelineHour) Get() *StudyTimelineHour {
	return v.value
}

func (v *NullableStudyTimelineHour) Set(val *StudyTimelineHour) {
	v.value = val
	v.isSet = true
}

func (v NullableStudyTimelineHour) IsSet() bool {
	return v.isSet
}

func (v *NullableStudyTimelineHour) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStudyTimelineHour(val *StudyTimelineHour) *NullableStudyTimelineHour {
	return &NullableStudyTimelineHour{value: val, isSet: true}
}

func (v NullableStudyTimelineHour) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStudyTimelineHour) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


