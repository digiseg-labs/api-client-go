/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SubscriptionOfferItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionOfferItem{}

// SubscriptionOfferItem struct for SubscriptionOfferItem
type SubscriptionOfferItem struct {
	// Unique ID for the object
	Id *string `json:"id,omitempty"`
	// The ID of the account that has the offer
	AccountId string `json:"account_id"`
	// The ID of the subscription plan that is offered (may have changed from the original, or may not exist yet)
	SubscriptionPlanId *string `json:"subscription_plan_id,omitempty"`
	// The ID of the user who accepted the offer
	AcceptedBy *string `json:"accepted_by,omitempty"`
	// Date and time of the acceptance
	AcceptedAt *time.Time `json:"accepted_at,omitempty"`
	// The ID of the subscription plan that this offer was originally based on
	OriginalPlanId *string `json:"original_plan_id,omitempty"`
	OfferedPrice SubscriptionPrice `json:"offered_price"`
	// Date and time of the object creation
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// ID of the user who created the object
	CreatedBy *string `json:"created_by,omitempty"`
	// Date and time of the latest update to the object
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	// ID of the user who last updated the object
	UpdatedBy *string `json:"updated_by,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionOfferItem SubscriptionOfferItem

// NewSubscriptionOfferItem instantiates a new SubscriptionOfferItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionOfferItem(accountId string, offeredPrice SubscriptionPrice) *SubscriptionOfferItem {
	this := SubscriptionOfferItem{}
	this.AccountId = accountId
	this.OfferedPrice = offeredPrice
	return &this
}

// NewSubscriptionOfferItemWithDefaults instantiates a new SubscriptionOfferItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionOfferItemWithDefaults() *SubscriptionOfferItem {
	this := SubscriptionOfferItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubscriptionOfferItem) SetId(v string) {
	o.Id = &v
}

// GetAccountId returns the AccountId field value
func (o *SubscriptionOfferItem) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *SubscriptionOfferItem) SetAccountId(v string) {
	o.AccountId = v
}

// GetSubscriptionPlanId returns the SubscriptionPlanId field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetSubscriptionPlanId() string {
	if o == nil || IsNil(o.SubscriptionPlanId) {
		var ret string
		return ret
	}
	return *o.SubscriptionPlanId
}

// GetSubscriptionPlanIdOk returns a tuple with the SubscriptionPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetSubscriptionPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionPlanId) {
		return nil, false
	}
	return o.SubscriptionPlanId, true
}

// HasSubscriptionPlanId returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasSubscriptionPlanId() bool {
	if o != nil && !IsNil(o.SubscriptionPlanId) {
		return true
	}

	return false
}

// SetSubscriptionPlanId gets a reference to the given string and assigns it to the SubscriptionPlanId field.
func (o *SubscriptionOfferItem) SetSubscriptionPlanId(v string) {
	o.SubscriptionPlanId = &v
}

// GetAcceptedBy returns the AcceptedBy field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetAcceptedBy() string {
	if o == nil || IsNil(o.AcceptedBy) {
		var ret string
		return ret
	}
	return *o.AcceptedBy
}

// GetAcceptedByOk returns a tuple with the AcceptedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetAcceptedByOk() (*string, bool) {
	if o == nil || IsNil(o.AcceptedBy) {
		return nil, false
	}
	return o.AcceptedBy, true
}

// HasAcceptedBy returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasAcceptedBy() bool {
	if o != nil && !IsNil(o.AcceptedBy) {
		return true
	}

	return false
}

// SetAcceptedBy gets a reference to the given string and assigns it to the AcceptedBy field.
func (o *SubscriptionOfferItem) SetAcceptedBy(v string) {
	o.AcceptedBy = &v
}

// GetAcceptedAt returns the AcceptedAt field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetAcceptedAt() time.Time {
	if o == nil || IsNil(o.AcceptedAt) {
		var ret time.Time
		return ret
	}
	return *o.AcceptedAt
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetAcceptedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AcceptedAt) {
		return nil, false
	}
	return o.AcceptedAt, true
}

// HasAcceptedAt returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasAcceptedAt() bool {
	if o != nil && !IsNil(o.AcceptedAt) {
		return true
	}

	return false
}

// SetAcceptedAt gets a reference to the given time.Time and assigns it to the AcceptedAt field.
func (o *SubscriptionOfferItem) SetAcceptedAt(v time.Time) {
	o.AcceptedAt = &v
}

// GetOriginalPlanId returns the OriginalPlanId field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetOriginalPlanId() string {
	if o == nil || IsNil(o.OriginalPlanId) {
		var ret string
		return ret
	}
	return *o.OriginalPlanId
}

// GetOriginalPlanIdOk returns a tuple with the OriginalPlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetOriginalPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalPlanId) {
		return nil, false
	}
	return o.OriginalPlanId, true
}

// HasOriginalPlanId returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasOriginalPlanId() bool {
	if o != nil && !IsNil(o.OriginalPlanId) {
		return true
	}

	return false
}

// SetOriginalPlanId gets a reference to the given string and assigns it to the OriginalPlanId field.
func (o *SubscriptionOfferItem) SetOriginalPlanId(v string) {
	o.OriginalPlanId = &v
}

// GetOfferedPrice returns the OfferedPrice field value
func (o *SubscriptionOfferItem) GetOfferedPrice() SubscriptionPrice {
	if o == nil {
		var ret SubscriptionPrice
		return ret
	}

	return o.OfferedPrice
}

// GetOfferedPriceOk returns a tuple with the OfferedPrice field value
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetOfferedPriceOk() (*SubscriptionPrice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OfferedPrice, true
}

// SetOfferedPrice sets field value
func (o *SubscriptionOfferItem) SetOfferedPrice(v SubscriptionPrice) {
	o.OfferedPrice = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *SubscriptionOfferItem) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetCreatedBy() string {
	if o == nil || IsNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetCreatedByOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *SubscriptionOfferItem) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SubscriptionOfferItem) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *SubscriptionOfferItem) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOfferItem) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *SubscriptionOfferItem) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *SubscriptionOfferItem) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

func (o SubscriptionOfferItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionOfferItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["account_id"] = o.AccountId
	if !IsNil(o.SubscriptionPlanId) {
		toSerialize["subscription_plan_id"] = o.SubscriptionPlanId
	}
	if !IsNil(o.AcceptedBy) {
		toSerialize["accepted_by"] = o.AcceptedBy
	}
	if !IsNil(o.AcceptedAt) {
		toSerialize["accepted_at"] = o.AcceptedAt
	}
	if !IsNil(o.OriginalPlanId) {
		toSerialize["original_plan_id"] = o.OriginalPlanId
	}
	toSerialize["offered_price"] = o.OfferedPrice
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionOfferItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"offered_price",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionOfferItem := _SubscriptionOfferItem{}

	err = json.Unmarshal(data, &varSubscriptionOfferItem)

	if err != nil {
		return err
	}

	*o = SubscriptionOfferItem(varSubscriptionOfferItem)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "subscription_plan_id")
		delete(additionalProperties, "accepted_by")
		delete(additionalProperties, "accepted_at")
		delete(additionalProperties, "original_plan_id")
		delete(additionalProperties, "offered_price")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "created_by")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "updated_by")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionOfferItem struct {
	value *SubscriptionOfferItem
	isSet bool
}

func (v NullableSubscriptionOfferItem) Get() *SubscriptionOfferItem {
	return v.value
}

func (v *NullableSubscriptionOfferItem) Set(val *SubscriptionOfferItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionOfferItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionOfferItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionOfferItem(val *SubscriptionOfferItem) *NullableSubscriptionOfferItem {
	return &NullableSubscriptionOfferItem{value: val, isSet: true}
}

func (v NullableSubscriptionOfferItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionOfferItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


