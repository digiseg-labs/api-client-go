/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young couples and singles | |  |  | c2 | Early family life | |  |  | c3 | Middle-aged families | |  |  | c4 | Mature families | |  |  | c5 | Pensioners / Retirees | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Small | |  |  | l2 | Medium | |  |  | l3 | Large | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionPlanAux type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlanAux{}

// SubscriptionPlanAux Defines a subscription plan (a feature set at a given pricing configuration)
type SubscriptionPlanAux struct {
	// The ID of the plan/price that the account is subscribed to
	Id *string `json:"id,omitempty"`
	FeatureSet PlanFeatureSet `json:"feature_set"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionPlanAux SubscriptionPlanAux

// NewSubscriptionPlanAux instantiates a new SubscriptionPlanAux object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlanAux(featureSet PlanFeatureSet) *SubscriptionPlanAux {
	this := SubscriptionPlanAux{}
	this.FeatureSet = featureSet
	return &this
}

// NewSubscriptionPlanAuxWithDefaults instantiates a new SubscriptionPlanAux object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlanAuxWithDefaults() *SubscriptionPlanAux {
	this := SubscriptionPlanAux{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SubscriptionPlanAux) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanAux) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SubscriptionPlanAux) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SubscriptionPlanAux) SetId(v string) {
	o.Id = &v
}

// GetFeatureSet returns the FeatureSet field value
func (o *SubscriptionPlanAux) GetFeatureSet() PlanFeatureSet {
	if o == nil {
		var ret PlanFeatureSet
		return ret
	}

	return o.FeatureSet
}

// GetFeatureSetOk returns a tuple with the FeatureSet field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanAux) GetFeatureSetOk() (*PlanFeatureSet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FeatureSet, true
}

// SetFeatureSet sets field value
func (o *SubscriptionPlanAux) SetFeatureSet(v PlanFeatureSet) {
	o.FeatureSet = v
}

func (o SubscriptionPlanAux) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlanAux) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["feature_set"] = o.FeatureSet

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionPlanAux) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"feature_set",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlanAux := _SubscriptionPlanAux{}

	err = json.Unmarshal(data, &varSubscriptionPlanAux)

	if err != nil {
		return err
	}

	*o = SubscriptionPlanAux(varSubscriptionPlanAux)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "feature_set")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionPlanAux struct {
	value *SubscriptionPlanAux
	isSet bool
}

func (v NullableSubscriptionPlanAux) Get() *SubscriptionPlanAux {
	return v.value
}

func (v *NullableSubscriptionPlanAux) Set(val *SubscriptionPlanAux) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlanAux) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlanAux) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlanAux(val *SubscriptionPlanAux) *NullableSubscriptionPlanAux {
	return &NullableSubscriptionPlanAux{value: val, isSet: true}
}

func (v NullableSubscriptionPlanAux) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlanAux) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


