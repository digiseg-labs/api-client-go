/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" />  ## Audience taxonomy  Digiseg audiences are grouped into private and business audiences. In each group there are categories that then contain the audiences. The API endpoints that communicate audiences and household characteristics, audience codes are being used.  The following table can be used as a reference for audience codes. Note that Digiseg will at times update names of audiences for purposes of internationalization, clarity or other such purposes - but the codes will remain as-is and should be considered a stable point of reference for the audience.  | Group | Category | Audience Code | Audience Name | |-------|----------|---------------|---------------| | private | home_type | a1 | Apartment | |  |  | a2 | House | |  | savings | b1 | No Savings | |  |  | b2 | Smaller Savings | |  |  | b3 | Larger Savings | |  | lifecycle | c1 | Young couples and singles | |  |  | c2 | Early family life | |  |  | c3 | Middle-aged families | |  |  | c4 | Mature families | |  |  | c5 | Pensioners / Retirees | |  | cars | d1 | No cars | |  |  | d2 | 1 car | |  |  | d3 | 2 or more cars | |  | children | e1 | No children | |  |  | e2 | 1 child | |  |  | e3 | 2 or more children | |  | education | f1 | Basic | |  |  | f2 | Medium | |  |  | f3 | Higher | |  | neighbourhood_type | g1 | Countryside | |  |  | g2 | Village | |  |  | g3 | Suburban | |  |  | g4 | City | |  | income | h1 | Lowest 20% | |  |  | h2 | Lowest 20-40% | |  |  | h3 | Middle 40-60% | |  |  | h4 | Highest 60-80% | |  |  | h5 | Top 20% | |  | home_ownership | j1 | Rent | |  |  | j2 | Own | |  | building_age | k1 | Pre 1945 | |  |  | k2 | 1945-1989 | |  |  | k3 | 1990 until today | |  | living_space | l1 | Small | |  |  | l2 | Medium | |  |  | l3 | Large | |  | tech_level | n1 | Basic | |  |  | n2 | Medium | |  |  | n3 | High | | business | size | ba1 | Small Business | |  |  | ba2 | Medium Business | |  |  | ba3 | Larger Business |  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the SubscriptionPlanBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlanBase{}

// SubscriptionPlanBase struct for SubscriptionPlanBase
type SubscriptionPlanBase struct {
	// The display name of the price/plan
	DisplayName *string `json:"display_name,omitempty"`
	// An optional code, typically provided if the plan/price is public and advertised
	Code *string `json:"code,omitempty"`
	// Is the plan/price a public price or custom?
	IsPublic bool `json:"is_public"`
	ProductType SubscriptionProductType `json:"product_type"`
	ListPrice *SubscriptionPrice `json:"list_price,omitempty"`
	StripeProductId *string `json:"stripe_product_id,omitempty"`
	StripePriceId *string `json:"stripe_price_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionPlanBase SubscriptionPlanBase

// NewSubscriptionPlanBase instantiates a new SubscriptionPlanBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlanBase(isPublic bool, productType SubscriptionProductType) *SubscriptionPlanBase {
	this := SubscriptionPlanBase{}
	this.IsPublic = isPublic
	this.ProductType = productType
	return &this
}

// NewSubscriptionPlanBaseWithDefaults instantiates a new SubscriptionPlanBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlanBaseWithDefaults() *SubscriptionPlanBase {
	this := SubscriptionPlanBase{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SubscriptionPlanBase) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SubscriptionPlanBase) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SubscriptionPlanBase) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SubscriptionPlanBase) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SubscriptionPlanBase) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SubscriptionPlanBase) SetCode(v string) {
	o.Code = &v
}

// GetIsPublic returns the IsPublic field value
func (o *SubscriptionPlanBase) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *SubscriptionPlanBase) SetIsPublic(v bool) {
	o.IsPublic = v
}

// GetProductType returns the ProductType field value
func (o *SubscriptionPlanBase) GetProductType() SubscriptionProductType {
	if o == nil {
		var ret SubscriptionProductType
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetProductTypeOk() (*SubscriptionProductType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *SubscriptionPlanBase) SetProductType(v SubscriptionProductType) {
	o.ProductType = v
}

// GetListPrice returns the ListPrice field value if set, zero value otherwise.
func (o *SubscriptionPlanBase) GetListPrice() SubscriptionPrice {
	if o == nil || IsNil(o.ListPrice) {
		var ret SubscriptionPrice
		return ret
	}
	return *o.ListPrice
}

// GetListPriceOk returns a tuple with the ListPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetListPriceOk() (*SubscriptionPrice, bool) {
	if o == nil || IsNil(o.ListPrice) {
		return nil, false
	}
	return o.ListPrice, true
}

// HasListPrice returns a boolean if a field has been set.
func (o *SubscriptionPlanBase) HasListPrice() bool {
	if o != nil && !IsNil(o.ListPrice) {
		return true
	}

	return false
}

// SetListPrice gets a reference to the given SubscriptionPrice and assigns it to the ListPrice field.
func (o *SubscriptionPlanBase) SetListPrice(v SubscriptionPrice) {
	o.ListPrice = &v
}

// GetStripeProductId returns the StripeProductId field value if set, zero value otherwise.
func (o *SubscriptionPlanBase) GetStripeProductId() string {
	if o == nil || IsNil(o.StripeProductId) {
		var ret string
		return ret
	}
	return *o.StripeProductId
}

// GetStripeProductIdOk returns a tuple with the StripeProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetStripeProductIdOk() (*string, bool) {
	if o == nil || IsNil(o.StripeProductId) {
		return nil, false
	}
	return o.StripeProductId, true
}

// HasStripeProductId returns a boolean if a field has been set.
func (o *SubscriptionPlanBase) HasStripeProductId() bool {
	if o != nil && !IsNil(o.StripeProductId) {
		return true
	}

	return false
}

// SetStripeProductId gets a reference to the given string and assigns it to the StripeProductId field.
func (o *SubscriptionPlanBase) SetStripeProductId(v string) {
	o.StripeProductId = &v
}

// GetStripePriceId returns the StripePriceId field value if set, zero value otherwise.
func (o *SubscriptionPlanBase) GetStripePriceId() string {
	if o == nil || IsNil(o.StripePriceId) {
		var ret string
		return ret
	}
	return *o.StripePriceId
}

// GetStripePriceIdOk returns a tuple with the StripePriceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanBase) GetStripePriceIdOk() (*string, bool) {
	if o == nil || IsNil(o.StripePriceId) {
		return nil, false
	}
	return o.StripePriceId, true
}

// HasStripePriceId returns a boolean if a field has been set.
func (o *SubscriptionPlanBase) HasStripePriceId() bool {
	if o != nil && !IsNil(o.StripePriceId) {
		return true
	}

	return false
}

// SetStripePriceId gets a reference to the given string and assigns it to the StripePriceId field.
func (o *SubscriptionPlanBase) SetStripePriceId(v string) {
	o.StripePriceId = &v
}

func (o SubscriptionPlanBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlanBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	toSerialize["is_public"] = o.IsPublic
	toSerialize["product_type"] = o.ProductType
	if !IsNil(o.ListPrice) {
		toSerialize["list_price"] = o.ListPrice
	}
	if !IsNil(o.StripeProductId) {
		toSerialize["stripe_product_id"] = o.StripeProductId
	}
	if !IsNil(o.StripePriceId) {
		toSerialize["stripe_price_id"] = o.StripePriceId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionPlanBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_public",
		"product_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlanBase := _SubscriptionPlanBase{}

	err = json.Unmarshal(data, &varSubscriptionPlanBase)

	if err != nil {
		return err
	}

	*o = SubscriptionPlanBase(varSubscriptionPlanBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "code")
		delete(additionalProperties, "is_public")
		delete(additionalProperties, "product_type")
		delete(additionalProperties, "list_price")
		delete(additionalProperties, "stripe_product_id")
		delete(additionalProperties, "stripe_price_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionPlanBase struct {
	value *SubscriptionPlanBase
	isSet bool
}

func (v NullableSubscriptionPlanBase) Get() *SubscriptionPlanBase {
	return v.value
}

func (v *NullableSubscriptionPlanBase) Set(val *SubscriptionPlanBase) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlanBase) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlanBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlanBase(val *SubscriptionPlanBase) *NullableSubscriptionPlanBase {
	return &NullableSubscriptionPlanBase{value: val, isSet: true}
}

func (v NullableSubscriptionPlanBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlanBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


