/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SubscriptionPlanMutation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlanMutation{}

// SubscriptionPlanMutation struct for SubscriptionPlanMutation
type SubscriptionPlanMutation struct {
	FeatureSet *PlanFeatureSet `json:"feature_set,omitempty"`
	// The display name of the price/plan
	DisplayName *string `json:"display_name,omitempty"`
	// An optional code, typically provided if the plan/price is public and advertised
	Code *string `json:"code,omitempty"`
	// Is the plan/price a public price or custom?
	IsPublic *bool `json:"is_public,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SubscriptionPlanMutation SubscriptionPlanMutation

// NewSubscriptionPlanMutation instantiates a new SubscriptionPlanMutation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlanMutation() *SubscriptionPlanMutation {
	this := SubscriptionPlanMutation{}
	return &this
}

// NewSubscriptionPlanMutationWithDefaults instantiates a new SubscriptionPlanMutation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlanMutationWithDefaults() *SubscriptionPlanMutation {
	this := SubscriptionPlanMutation{}
	return &this
}

// GetFeatureSet returns the FeatureSet field value if set, zero value otherwise.
func (o *SubscriptionPlanMutation) GetFeatureSet() PlanFeatureSet {
	if o == nil || IsNil(o.FeatureSet) {
		var ret PlanFeatureSet
		return ret
	}
	return *o.FeatureSet
}

// GetFeatureSetOk returns a tuple with the FeatureSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanMutation) GetFeatureSetOk() (*PlanFeatureSet, bool) {
	if o == nil || IsNil(o.FeatureSet) {
		return nil, false
	}
	return o.FeatureSet, true
}

// HasFeatureSet returns a boolean if a field has been set.
func (o *SubscriptionPlanMutation) HasFeatureSet() bool {
	if o != nil && !IsNil(o.FeatureSet) {
		return true
	}

	return false
}

// SetFeatureSet gets a reference to the given PlanFeatureSet and assigns it to the FeatureSet field.
func (o *SubscriptionPlanMutation) SetFeatureSet(v PlanFeatureSet) {
	o.FeatureSet = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SubscriptionPlanMutation) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanMutation) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SubscriptionPlanMutation) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SubscriptionPlanMutation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *SubscriptionPlanMutation) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanMutation) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *SubscriptionPlanMutation) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *SubscriptionPlanMutation) SetCode(v string) {
	o.Code = &v
}

// GetIsPublic returns the IsPublic field value if set, zero value otherwise.
func (o *SubscriptionPlanMutation) GetIsPublic() bool {
	if o == nil || IsNil(o.IsPublic) {
		var ret bool
		return ret
	}
	return *o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanMutation) GetIsPublicOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublic) {
		return nil, false
	}
	return o.IsPublic, true
}

// HasIsPublic returns a boolean if a field has been set.
func (o *SubscriptionPlanMutation) HasIsPublic() bool {
	if o != nil && !IsNil(o.IsPublic) {
		return true
	}

	return false
}

// SetIsPublic gets a reference to the given bool and assigns it to the IsPublic field.
func (o *SubscriptionPlanMutation) SetIsPublic(v bool) {
	o.IsPublic = &v
}

func (o SubscriptionPlanMutation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlanMutation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FeatureSet) {
		toSerialize["feature_set"] = o.FeatureSet
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.IsPublic) {
		toSerialize["is_public"] = o.IsPublic
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SubscriptionPlanMutation) UnmarshalJSON(data []byte) (err error) {
	varSubscriptionPlanMutation := _SubscriptionPlanMutation{}

	err = json.Unmarshal(data, &varSubscriptionPlanMutation)

	if err != nil {
		return err
	}

	*o = SubscriptionPlanMutation(varSubscriptionPlanMutation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "feature_set")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "code")
		delete(additionalProperties, "is_public")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptionPlanMutation struct {
	value *SubscriptionPlanMutation
	isSet bool
}

func (v NullableSubscriptionPlanMutation) Get() *SubscriptionPlanMutation {
	return v.value
}

func (v *NullableSubscriptionPlanMutation) Set(val *SubscriptionPlanMutation) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlanMutation) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlanMutation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlanMutation(val *SubscriptionPlanMutation) *NullableSubscriptionPlanMutation {
	return &NullableSubscriptionPlanMutation{value: val, isSet: true}
}

func (v NullableSubscriptionPlanMutation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlanMutation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


