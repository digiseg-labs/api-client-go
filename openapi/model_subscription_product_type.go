/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SubscriptionProductType the model 'SubscriptionProductType'
type SubscriptionProductType string

// List of SubscriptionProductType
const (
	SUBSCRIPTIONPRODUCTTYPE_BASE SubscriptionProductType = "base"
	SUBSCRIPTIONPRODUCTTYPE_ADD_ON SubscriptionProductType = "add-on"
)

// All allowed values of SubscriptionProductType enum
var AllowedSubscriptionProductTypeEnumValues = []SubscriptionProductType{
	"base",
	"add-on",
}

func (v *SubscriptionProductType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubscriptionProductType(value)
	for _, existing := range AllowedSubscriptionProductTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubscriptionProductType", value)
}

// NewSubscriptionProductTypeFromValue returns a pointer to a valid SubscriptionProductType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubscriptionProductTypeFromValue(v string) (*SubscriptionProductType, error) {
	ev := SubscriptionProductType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubscriptionProductType: valid values are %v", v, AllowedSubscriptionProductTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubscriptionProductType) IsValid() bool {
	for _, existing := range AllowedSubscriptionProductTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubscriptionProductType value
func (v SubscriptionProductType) Ptr() *SubscriptionProductType {
	return &v
}

type NullableSubscriptionProductType struct {
	value *SubscriptionProductType
	isSet bool
}

func (v NullableSubscriptionProductType) Get() *SubscriptionProductType {
	return v.value
}

func (v *NullableSubscriptionProductType) Set(val *SubscriptionProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionProductType(val *SubscriptionProductType) *NullableSubscriptionProductType {
	return &NullableSubscriptionProductType{value: val, isSet: true}
}

func (v NullableSubscriptionProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

