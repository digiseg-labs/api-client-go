/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the UserAccountMembershipBase type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAccountMembershipBase{}

// UserAccountMembershipBase Describes a user's membership of an account
type UserAccountMembershipBase struct {
	// The ID of the account
	AccountId string `json:"account_id"`
	// The name of the account
	AccountName *string `json:"account_name,omitempty"`
	// The roles that the user has within the account
	Roles []UserAccountRole `json:"roles"`
	AdditionalProperties map[string]interface{}
}

type _UserAccountMembershipBase UserAccountMembershipBase

// NewUserAccountMembershipBase instantiates a new UserAccountMembershipBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAccountMembershipBase(accountId string, roles []UserAccountRole) *UserAccountMembershipBase {
	this := UserAccountMembershipBase{}
	this.AccountId = accountId
	this.Roles = roles
	return &this
}

// NewUserAccountMembershipBaseWithDefaults instantiates a new UserAccountMembershipBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAccountMembershipBaseWithDefaults() *UserAccountMembershipBase {
	this := UserAccountMembershipBase{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *UserAccountMembershipBase) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *UserAccountMembershipBase) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *UserAccountMembershipBase) SetAccountId(v string) {
	o.AccountId = v
}

// GetAccountName returns the AccountName field value if set, zero value otherwise.
func (o *UserAccountMembershipBase) GetAccountName() string {
	if o == nil || IsNil(o.AccountName) {
		var ret string
		return ret
	}
	return *o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAccountMembershipBase) GetAccountNameOk() (*string, bool) {
	if o == nil || IsNil(o.AccountName) {
		return nil, false
	}
	return o.AccountName, true
}

// HasAccountName returns a boolean if a field has been set.
func (o *UserAccountMembershipBase) HasAccountName() bool {
	if o != nil && !IsNil(o.AccountName) {
		return true
	}

	return false
}

// SetAccountName gets a reference to the given string and assigns it to the AccountName field.
func (o *UserAccountMembershipBase) SetAccountName(v string) {
	o.AccountName = &v
}

// GetRoles returns the Roles field value
func (o *UserAccountMembershipBase) GetRoles() []UserAccountRole {
	if o == nil {
		var ret []UserAccountRole
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *UserAccountMembershipBase) GetRolesOk() ([]UserAccountRole, bool) {
	if o == nil {
		return nil, false
	}
	return o.Roles, true
}

// SetRoles sets field value
func (o *UserAccountMembershipBase) SetRoles(v []UserAccountRole) {
	o.Roles = v
}

func (o UserAccountMembershipBase) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAccountMembershipBase) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	if !IsNil(o.AccountName) {
		toSerialize["account_name"] = o.AccountName
	}
	toSerialize["roles"] = o.Roles

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserAccountMembershipBase) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"roles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAccountMembershipBase := _UserAccountMembershipBase{}

	err = json.Unmarshal(data, &varUserAccountMembershipBase)

	if err != nil {
		return err
	}

	*o = UserAccountMembershipBase(varUserAccountMembershipBase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "account_name")
		delete(additionalProperties, "roles")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserAccountMembershipBase struct {
	value *UserAccountMembershipBase
	isSet bool
}

func (v NullableUserAccountMembershipBase) Get() *UserAccountMembershipBase {
	return v.value
}

func (v *NullableUserAccountMembershipBase) Set(val *UserAccountMembershipBase) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountMembershipBase) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountMembershipBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountMembershipBase(val *UserAccountMembershipBase) *NullableUserAccountMembershipBase {
	return &NullableUserAccountMembershipBase{value: val, isSet: true}
}

func (v NullableUserAccountMembershipBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountMembershipBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


