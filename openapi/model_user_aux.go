/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserAux type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAux{}

// UserAux struct for UserAux
type UserAux struct {
	// ID of the account that this user pertains to
	AccountId *string `json:"account_id,omitempty"`
	// Determines if the user is a super admin of Digiseg API services
	IsSuperAdmin *bool `json:"is_super_admin,omitempty"`
}

// NewUserAux instantiates a new UserAux object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAux() *UserAux {
	this := UserAux{}
	return &this
}

// NewUserAuxWithDefaults instantiates a new UserAux object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAuxWithDefaults() *UserAux {
	this := UserAux{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *UserAux) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAux) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *UserAux) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *UserAux) SetAccountId(v string) {
	o.AccountId = &v
}

// GetIsSuperAdmin returns the IsSuperAdmin field value if set, zero value otherwise.
func (o *UserAux) GetIsSuperAdmin() bool {
	if o == nil || IsNil(o.IsSuperAdmin) {
		var ret bool
		return ret
	}
	return *o.IsSuperAdmin
}

// GetIsSuperAdminOk returns a tuple with the IsSuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAux) GetIsSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuperAdmin) {
		return nil, false
	}
	return o.IsSuperAdmin, true
}

// HasIsSuperAdmin returns a boolean if a field has been set.
func (o *UserAux) HasIsSuperAdmin() bool {
	if o != nil && !IsNil(o.IsSuperAdmin) {
		return true
	}

	return false
}

// SetIsSuperAdmin gets a reference to the given bool and assigns it to the IsSuperAdmin field.
func (o *UserAux) SetIsSuperAdmin(v bool) {
	o.IsSuperAdmin = &v
}

func (o UserAux) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAux) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.IsSuperAdmin) {
		toSerialize["is_super_admin"] = o.IsSuperAdmin
	}
	return toSerialize, nil
}

type NullableUserAux struct {
	value *UserAux
	isSet bool
}

func (v NullableUserAux) Get() *UserAux {
	return v.value
}

func (v *NullableUserAux) Set(val *UserAux) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAux) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAux) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAux(val *UserAux) *NullableUserAux {
	return &NullableUserAux{value: val, isSet: true}
}

func (v NullableUserAux) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAux) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


