/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  ## Developer SDKs  In addition to using these APIs directly through any HTTP client, we provide a set of API client SDKs for popular programming languages:  <div class=\"api-clients\">   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-python\">     <i class=\"api-client-sdk-logo devicon-python-plain\"></i>     <p>API client for Python</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-ts\">     <i class=\"api-client-sdk-logo devicon-typescript-plain\"></i>     <p>API client for TypeScript</p>   </a>   <a class=\"api-client-box\" href=\"https://github.com/digiseg-labs/api-client-go\">     <i class=\"api-client-sdk-logo devicon-go-original-wordmark\"></i>     <p>API client for Go</p>   </a> </div> <div class=\"api-clients-breaker\" /> 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the UserCreation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserCreation{}

// UserCreation struct for UserCreation
type UserCreation struct {
	// The email of the user (used as username when authenticating with password)
	Email *string `json:"email,omitempty"`
	// Human readable name of the user
	Name *string `json:"name,omitempty"`
	// ID of the account that this user pertains to. If the user has multiple account memberships, this account ID will represent the primary account of the user. 
	// Deprecated
	AccountId *string `json:"account_id,omitempty"`
	// The roles that the user has within the account
	// Deprecated
	Roles []UserAccountRole `json:"roles,omitempty"`
	// The URL to an avatar of the user
	AvatarUrl *string `json:"avatar_url,omitempty"`
	// The approximate last time that the user logged in
	LoggedInAt *time.Time `json:"logged_in_at,omitempty"`
	AccountMemberships []UserAccountMembership `json:"account_memberships,omitempty"`
	// Determines if the user is a super admin of Digiseg API services
	// Deprecated
	IsSuperAdmin *bool `json:"is_super_admin,omitempty"`
	PlatformRoles []UserPlatformRole `json:"platform_roles,omitempty"`
	// Password of the user
	Password *string `json:"password,omitempty"`
	// Whether or not to notify the user that they have been registered
	NotifyUser *bool `json:"notify_user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserCreation UserCreation

// NewUserCreation instantiates a new UserCreation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCreation() *UserCreation {
	this := UserCreation{}
	var notifyUser bool = true
	this.NotifyUser = &notifyUser
	return &this
}

// NewUserCreationWithDefaults instantiates a new UserCreation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCreationWithDefaults() *UserCreation {
	this := UserCreation{}
	var notifyUser bool = true
	this.NotifyUser = &notifyUser
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserCreation) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserCreation) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserCreation) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserCreation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserCreation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserCreation) SetName(v string) {
	o.Name = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
// Deprecated
func (o *UserCreation) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserCreation) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *UserCreation) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
// Deprecated
func (o *UserCreation) SetAccountId(v string) {
	o.AccountId = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
// Deprecated
func (o *UserCreation) GetRoles() []UserAccountRole {
	if o == nil || IsNil(o.Roles) {
		var ret []UserAccountRole
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserCreation) GetRolesOk() ([]UserAccountRole, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserCreation) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UserAccountRole and assigns it to the Roles field.
// Deprecated
func (o *UserCreation) SetRoles(v []UserAccountRole) {
	o.Roles = v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *UserCreation) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *UserCreation) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *UserCreation) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetLoggedInAt returns the LoggedInAt field value if set, zero value otherwise.
func (o *UserCreation) GetLoggedInAt() time.Time {
	if o == nil || IsNil(o.LoggedInAt) {
		var ret time.Time
		return ret
	}
	return *o.LoggedInAt
}

// GetLoggedInAtOk returns a tuple with the LoggedInAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetLoggedInAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LoggedInAt) {
		return nil, false
	}
	return o.LoggedInAt, true
}

// HasLoggedInAt returns a boolean if a field has been set.
func (o *UserCreation) HasLoggedInAt() bool {
	if o != nil && !IsNil(o.LoggedInAt) {
		return true
	}

	return false
}

// SetLoggedInAt gets a reference to the given time.Time and assigns it to the LoggedInAt field.
func (o *UserCreation) SetLoggedInAt(v time.Time) {
	o.LoggedInAt = &v
}

// GetAccountMemberships returns the AccountMemberships field value if set, zero value otherwise.
func (o *UserCreation) GetAccountMemberships() []UserAccountMembership {
	if o == nil || IsNil(o.AccountMemberships) {
		var ret []UserAccountMembership
		return ret
	}
	return o.AccountMemberships
}

// GetAccountMembershipsOk returns a tuple with the AccountMemberships field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetAccountMembershipsOk() ([]UserAccountMembership, bool) {
	if o == nil || IsNil(o.AccountMemberships) {
		return nil, false
	}
	return o.AccountMemberships, true
}

// HasAccountMemberships returns a boolean if a field has been set.
func (o *UserCreation) HasAccountMemberships() bool {
	if o != nil && !IsNil(o.AccountMemberships) {
		return true
	}

	return false
}

// SetAccountMemberships gets a reference to the given []UserAccountMembership and assigns it to the AccountMemberships field.
func (o *UserCreation) SetAccountMemberships(v []UserAccountMembership) {
	o.AccountMemberships = v
}

// GetIsSuperAdmin returns the IsSuperAdmin field value if set, zero value otherwise.
// Deprecated
func (o *UserCreation) GetIsSuperAdmin() bool {
	if o == nil || IsNil(o.IsSuperAdmin) {
		var ret bool
		return ret
	}
	return *o.IsSuperAdmin
}

// GetIsSuperAdminOk returns a tuple with the IsSuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UserCreation) GetIsSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuperAdmin) {
		return nil, false
	}
	return o.IsSuperAdmin, true
}

// HasIsSuperAdmin returns a boolean if a field has been set.
func (o *UserCreation) HasIsSuperAdmin() bool {
	if o != nil && !IsNil(o.IsSuperAdmin) {
		return true
	}

	return false
}

// SetIsSuperAdmin gets a reference to the given bool and assigns it to the IsSuperAdmin field.
// Deprecated
func (o *UserCreation) SetIsSuperAdmin(v bool) {
	o.IsSuperAdmin = &v
}

// GetPlatformRoles returns the PlatformRoles field value if set, zero value otherwise.
func (o *UserCreation) GetPlatformRoles() []UserPlatformRole {
	if o == nil || IsNil(o.PlatformRoles) {
		var ret []UserPlatformRole
		return ret
	}
	return o.PlatformRoles
}

// GetPlatformRolesOk returns a tuple with the PlatformRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetPlatformRolesOk() ([]UserPlatformRole, bool) {
	if o == nil || IsNil(o.PlatformRoles) {
		return nil, false
	}
	return o.PlatformRoles, true
}

// HasPlatformRoles returns a boolean if a field has been set.
func (o *UserCreation) HasPlatformRoles() bool {
	if o != nil && !IsNil(o.PlatformRoles) {
		return true
	}

	return false
}

// SetPlatformRoles gets a reference to the given []UserPlatformRole and assigns it to the PlatformRoles field.
func (o *UserCreation) SetPlatformRoles(v []UserPlatformRole) {
	o.PlatformRoles = v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserCreation) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserCreation) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserCreation) SetPassword(v string) {
	o.Password = &v
}

// GetNotifyUser returns the NotifyUser field value if set, zero value otherwise.
func (o *UserCreation) GetNotifyUser() bool {
	if o == nil || IsNil(o.NotifyUser) {
		var ret bool
		return ret
	}
	return *o.NotifyUser
}

// GetNotifyUserOk returns a tuple with the NotifyUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCreation) GetNotifyUserOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyUser) {
		return nil, false
	}
	return o.NotifyUser, true
}

// HasNotifyUser returns a boolean if a field has been set.
func (o *UserCreation) HasNotifyUser() bool {
	if o != nil && !IsNil(o.NotifyUser) {
		return true
	}

	return false
}

// SetNotifyUser gets a reference to the given bool and assigns it to the NotifyUser field.
func (o *UserCreation) SetNotifyUser(v bool) {
	o.NotifyUser = &v
}

func (o UserCreation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserCreation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.AccountId) {
		toSerialize["account_id"] = o.AccountId
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.LoggedInAt) {
		toSerialize["logged_in_at"] = o.LoggedInAt
	}
	if !IsNil(o.AccountMemberships) {
		toSerialize["account_memberships"] = o.AccountMemberships
	}
	if !IsNil(o.IsSuperAdmin) {
		toSerialize["is_super_admin"] = o.IsSuperAdmin
	}
	if !IsNil(o.PlatformRoles) {
		toSerialize["platform_roles"] = o.PlatformRoles
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.NotifyUser) {
		toSerialize["notify_user"] = o.NotifyUser
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserCreation) UnmarshalJSON(data []byte) (err error) {
	varUserCreation := _UserCreation{}

	err = json.Unmarshal(data, &varUserCreation)

	if err != nil {
		return err
	}

	*o = UserCreation(varUserCreation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "email")
		delete(additionalProperties, "name")
		delete(additionalProperties, "account_id")
		delete(additionalProperties, "roles")
		delete(additionalProperties, "avatar_url")
		delete(additionalProperties, "logged_in_at")
		delete(additionalProperties, "account_memberships")
		delete(additionalProperties, "is_super_admin")
		delete(additionalProperties, "platform_roles")
		delete(additionalProperties, "password")
		delete(additionalProperties, "notify_user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserCreation struct {
	value *UserCreation
	isSet bool
}

func (v NullableUserCreation) Get() *UserCreation {
	return v.value
}

func (v *NullableUserCreation) Set(val *UserCreation) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCreation) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCreation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCreation(val *UserCreation) *NullableUserCreation {
	return &NullableUserCreation{value: val, isSet: true}
}

func (v NullableUserCreation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCreation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


