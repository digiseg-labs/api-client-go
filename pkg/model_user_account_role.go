/*
Digiseg API

### Digiseg API documentation  # Introduction  This API let you harness the power of Digisegs powerful and tracking-free segmentation engine.  Audiences by Digiseg are available in 50+ countries, probablistically mapping neighborhood characteristics to the IP addresses observed on the internet - Household targeting & measurement for the post-cookie world.  For a catalog of Digisegs audiences, refer to the [Audience list](https://digiseg.io/audiences-list).  There is also an interactive [Audience builder](https://digiseg.io/cookieless-audience-builder/) which lets you discover the targeting reach and power of combining various household characteristics into composite audiences. 

API version: 1.0.0
Contact: support@digiseg.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UserAccountRole Determines the role of a user within an account
type UserAccountRole string

// List of UserAccountRole
const (
	OWNER UserAccountRole = "owner"
	ADMIN UserAccountRole = "admin"
	USER UserAccountRole = "user"
)

// All allowed values of UserAccountRole enum
var AllowedUserAccountRoleEnumValues = []UserAccountRole{
	"owner",
	"admin",
	"user",
}

func (v *UserAccountRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UserAccountRole(value)
	for _, existing := range AllowedUserAccountRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UserAccountRole", value)
}

// NewUserAccountRoleFromValue returns a pointer to a valid UserAccountRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserAccountRoleFromValue(v string) (*UserAccountRole, error) {
	ev := UserAccountRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UserAccountRole: valid values are %v", v, AllowedUserAccountRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserAccountRole) IsValid() bool {
	for _, existing := range AllowedUserAccountRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UserAccountRole value
func (v UserAccountRole) Ptr() *UserAccountRole {
	return &v
}

type NullableUserAccountRole struct {
	value *UserAccountRole
	isSet bool
}

func (v NullableUserAccountRole) Get() *UserAccountRole {
	return v.value
}

func (v *NullableUserAccountRole) Set(val *UserAccountRole) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAccountRole) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAccountRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAccountRole(val *UserAccountRole) *NullableUserAccountRole {
	return &NullableUserAccountRole{value: val, isSet: true}
}

func (v NullableUserAccountRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAccountRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

